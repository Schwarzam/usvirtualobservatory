/**
 * Copyright (C) Smithsonian Astrophysical Observatory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SedImporterMainView.java
 *
 * Created on May 6, 2011, 3:53:29 PM
 */

package cfa.vo.sed.gui;

import cfa.vo.sed.importer.OSXAdapter;
import cfa.vo.utils.NarrowOptionPane;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author olaurino
 */
public class MainView extends JFrame {

    private static boolean MAC_OS_X = (System.getProperty("os.name").toLowerCase().startsWith("mac os x"));

    private About aboutBox = new About(MainView.getInstance(), false);

    /** Creates new form SedImporterMainView */
    public MainView() {
        initComponents();
        desktopPane.setDesktopManager(new BoundDesktopManager(desktopPane));
        desktopPane.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        this.setLocationRelativeTo(null);
        this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int confirm = JOptionPane.showOptionDialog(MainView.this,

                        "Do you really want to close " + getTitle() + "?",

                        "Close Confirmation",

                        JOptionPane.YES_NO_OPTION,

                        JOptionPane.QUESTION_MESSAGE,

                        null, null, null);

                if (confirm == 0) {

                System.exit(0);

              }
            }
        });
        if (MAC_OS_X) {
            try {
                // Generate and register the OSXAdapter, passing it a hash of all the methods we wish to
                // use as delegates for various com.apple.eawt.ApplicationListener methods
                OSXAdapter.setQuitHandler(this, getClass().getDeclaredMethod("quit", (Class[])null));
                OSXAdapter.setAboutHandler(this, getClass().getDeclaredMethod("about", (Class[])null));
//                OSXAdapter.setPreferencesHandler(this, getClass().getDeclaredMethod("preferences", (Class[])null));
//                OSXAdapter.setFileHandler(this, getClass().getDeclaredMethod("loadImageFile", new Class[] { String.class }));
            } catch (Exception e) {
                System.err.println("Error while loading the OSXAdapter:");
                e.printStackTrace();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        desktopPane = new javax.swing.JDesktopPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        fileMenu.setText("File");

        jMenu1.setText("New SED");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("From Scratch");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromScratch(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("From Configuration");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromConfiguration(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        fileMenu.add(jMenu1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sed Importer");

        desktopPane.setBackground(new java.awt.Color(0, 102, 102));
        desktopPane.setForeground(new java.awt.Color(255, 255, 255));
        desktopPane.setAutoscrolls(true);
        desktopPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        desktopPane.setName("sedDesktop"); // NOI18N
        desktopPane.setPreferredSize(new java.awt.Dimension(1024, 768));
        desktopPane.setSize(new java.awt.Dimension(1036, 693));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settings.png")));
        jLabel2.setText("New SED from Setup");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newFromSetup(evt);
            }
        });
        jLabel2.setBounds(280, 250, 210, 180);
        desktopPane.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_contextual.png")));
        jLabel3.setText("Iris Online Help");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showIrisHelp(evt);
            }
        });
        jLabel3.setBounds(280, 40, 210, 180);
        desktopPane.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iris_button_small.png")));
        jLabel4.setText("Launch Iris");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                launchIris(evt);
            }
        });
        jLabel4.setBounds(40, 450, 210, 180);
        desktopPane.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane1.setBorder(null);

        jTextArea1.setBackground(new java.awt.Color(0, 102, 102));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setForeground(new java.awt.Color(204, 204, 204));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("The SED Importer allows you to fetch SED files from the NED SED Service.\n\nThe SED Importer also allows you to import SED segments from any file - binary or text-based, from your local disk or a remote URL - that does not conform to the IVOA SED, Spectrum and Photometry Data Model; these include FITS and VOTable files which do not conform to the IVOA standards.\n\nSince these files are not standard, you must provide some required information that would allow the segment to be used by VO tools that deal with SED standard files.\n\nBy clicking on the \"New SED from scratch\" icon, you can create a new SED and start adding \"segments\" to it, through the \"New Segment(s)\" button: a segment is a photometric point, a spectrum or an entire SED itself (i.e. any combination of photometric points and spectra).\n\nAfter saving an SED file (either the entire SED you are building or a subset of the segments you imported), you can have IRIS loading it. In a future version this operation will be accomplished seamlessly by using SAMP.\n");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jTextArea1.setCaretColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane1.setBounds(600, 20, 360, 460);
        desktopPane.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("For more information, click here or on the Help icons.");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showIrisHelp(evt);
            }
        });
        jLabel1.setBounds(600, 490, 360, 16);
        desktopPane.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help_contextual.png")));
        jLabel5.setText("Importer Online Help");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showImporterHelp(evt);
            }
        });
        jLabel5.setBounds(40, 40, 210, 180);
        desktopPane.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setText("About Sed Importer");
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showAbout(evt);
            }
        });
        jLabel6.setBounds(40, 640, 140, 16);
        desktopPane.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scratch.png")));
        jLabel7.setText("New SED from scratch");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newFromScratch(evt);
            }
        });
        jLabel7.setBounds(40, 250, 210, 180);
        desktopPane.add(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1036, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void fromScratch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromScratch
        SedNameDialog dialog = new SedNameDialog(this, true);
        dialog.setVisible(true);
        String name = dialog.getSedName();
        if(!name.isEmpty()) {
            JInternalFrame frame = new NewSedFrame(name);
            desktopPane.add(frame);
            frame.setVisible(true);
        }
    }//GEN-LAST:event_fromScratch

    private void fromConfiguration(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromConfiguration
        LoadSetupDialog dia = new LoadSetupDialog(this);
        dia.setVisible(true);
    }//GEN-LAST:event_fromConfiguration

    private void newFromScratch(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFromScratch
        SedNameDialog dialog = new SedNameDialog(this, true);
        dialog.setVisible(true);
        String name = dialog.getSedName();
        if(!name.isEmpty()) {
            JInternalFrame frame = new NewSedFrame(name);
            desktopPane.add(frame);
            frame.setVisible(true);
        }
    }//GEN-LAST:event_newFromScratch

    private void newFromSetup(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFromSetup
        LoadSetupDialog dia = new LoadSetupDialog(this);
        dia.setVisible(true);
    }//GEN-LAST:event_newFromSetup

    private void showIrisHelp(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showIrisHelp
        try {
            try {
                java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
                if( !java.awt.Desktop.isDesktopSupported() || !desktop.isSupported( java.awt.Desktop.Action.BROWSE ) ) {
                    HelpBrowser browser = new HelpBrowser(new URL("http://cxc.cfa.harvard.edu/csc/temp/sed"));
                    desktopPane.add(browser);
                    browser.show();
                } else {
                    desktop.browse(new URI("http://cxc.cfa.harvard.edu/csc/temp/sed"));
                }
            } catch (Exception ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_showIrisHelp

    private void showImporterHelp(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showImporterHelp
        try {
            java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
            if( !java.awt.Desktop.isDesktopSupported() || !desktop.isSupported( java.awt.Desktop.Action.BROWSE ) ) {
                HelpBrowser browser = new HelpBrowser(new URL("http://cxc.cfa.harvard.edu/csc/temp/sed/threads/importer"));
                desktopPane.add(browser);
                browser.show();
            } else {
                desktop.browse(new URI("http://cxc.cfa.harvard.edu/csc/temp/sed/threads/importer"));
            }
        } catch (Exception ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showImporterHelp

    private void showAbout(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAbout
        aboutBox.setLocation((int)desktopPane.getWidth()/2-125, (int)desktopPane.getHeight()/2-110);
        aboutBox.setVisible(true);
    }//GEN-LAST:event_showAbout

    private void launchIris(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_launchIris
        try {
            String dir = System.getenv("IRIS_DIR");
            new ProcessBuilder("./Iris").directory(new File(dir)).start();
        } catch (Exception ex) {
            NarrowOptionPane.showMessageDialog(MainView.this,

                        "Error while trying to launch Iris. Please retry invoking Iris directly from the command line."
                        + "Error message: "+ex.getMessage(),

                        "Error",

                        JOptionPane.ERROR_MESSAGE

                        );
        }
    }//GEN-LAST:event_launchIris

    public static MainView getInstance() {
        return MainViewHolder.INSTANCE;
    }

    public JDesktopPane getDesktopPane() {
        return getInstance().desktopPane;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                getInstance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private static class MainViewHolder {
        private static final MainView INSTANCE = new MainView();
    }

    private static final JFileChooser fileChooser = new JFileChooser();

    /**
     * Get the value of fileChooser
     *
     * @return the value of fileChooser
     */
    public static JFileChooser getFileChooser() {
        return fileChooser;
    }

    public boolean quit() {
        int confirm = NarrowOptionPane.showOptionDialog(MainView.this,

                        "Do you really want to close " + getTitle() + "?",

                        "Close Confirmation",

                        JOptionPane.YES_NO_OPTION,

                        JOptionPane.QUESTION_MESSAGE,

                        null, null, null);
        return (confirm == NarrowOptionPane.YES_OPTION);
    }

    public void about() {
        showAbout(null);
    }


}
