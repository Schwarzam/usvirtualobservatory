/**
 * Copyright (C) Smithsonian Astrophysical Observatory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package cfa.vo.utils;

import com.sun.xml.rpc.client.BasicService;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.*;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class SesameService_SerializerRegistry implements SerializerConstants {
    public SesameService_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping12 = registry.getTypeMapping(SOAP12Constants.NS_SOAP_ENCODING);
        TypeMapping mapping = registry.getTypeMapping(SOAPConstants.NS_SOAP_ENCODING);
        TypeMapping mapping2 = registry.getTypeMapping("");
        {
            QName type = new QName("urn:Sesame", "getAvailabilityResponse");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_getAvailability_getAvailabilityRequest_getAvailabilityResponse_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_getAvailability_getAvailabilityRequest_getAvailabilityResponse_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "sesame");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_sesame_sesameRequest1_sesameResponse1_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_sesame_sesameRequest1_sesameResponse1_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "SesameXMLResponse");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_SesameXML_SesameXMLRequest_SesameXMLResponse_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_SesameXML_SesameXMLRequest_SesameXMLResponse_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "SesameXML");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_SesameXML_SesameXMLRequest_SesameXMLResponse_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_SesameXML_SesameXMLRequest_SesameXMLResponse_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "sesameResponse");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_sesame_sesameRequest1_sesameResponse1_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_sesame_sesameRequest1_sesameResponse1_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "sesameResponse");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_sesame_sesameRequest_sesameResponse_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_sesame_sesameRequest_sesameResponse_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "mainResponse");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_main_mainRequest_mainResponse_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_main_mainRequest_mainResponse_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://DefaultNamespace", "getAvailability");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_getAvailability_getAvailabilityRequest_getAvailabilityResponse_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_getAvailability_getAvailabilityRequest_getAvailabilityResponse_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "sesame");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_sesame_sesameRequest2_sesameResponse2_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_sesame_sesameRequest2_sesameResponse2_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "SesameResponse");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_Sesame_SesameRequest_SesameResponse_ResponseStruct2_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_Sesame_SesameRequest_SesameResponse_ResponseStruct2.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "Sesame");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_Sesame_SesameRequest_SesameResponse_RequestStruct2_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_Sesame_SesameRequest_SesameResponse_RequestStruct2.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "sesame");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_sesame_sesameRequest_sesameResponse_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_sesame_sesameRequest_sesameResponse_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://DefaultNamespace", "main");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_main_mainRequest_mainResponse_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_main_mainRequest_mainResponse_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "sesameResponse");
            CombinedSerializer serializer = new cfa.vo.utils.Sesame_sesame_sesameRequest2_sesameResponse2_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,cfa.vo.utils.Sesame_sesame_sesameRequest2_sesameResponse2_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("urn:Sesame", "ArrayOf_xsd_string");
            QName elemName = new QName("", "item");
            CombinedSerializer serializer = new ObjectArraySerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING , 
                elemName, SchemaConstants.QNAME_TYPE_STRING, java.lang.String.class, 1, null, SOAPVersion.SOAP_11);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,java.lang.String[].class, type, serializer);
        }
        return registry;
    }
    
    private static void registerSerializer(TypeMapping mapping, java.lang.Class javaType, javax.xml.namespace.QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
