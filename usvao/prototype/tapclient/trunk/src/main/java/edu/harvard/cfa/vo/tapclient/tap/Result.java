package edu.harvard.cfa.vo.tapclient.tap;

import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.PrintStream;

import edu.harvard.cfa.vo.tapclient.util.HttpClient;
import edu.harvard.cfa.vo.tapclient.util.HttpException;

/**
 * A reference to a result generated by an asynchronous query.
 * @see AsyncJob
 */
public class Result {
    private int hash;

    private String id;
    private String type;
    private String href;

    /**
     * Constructs a Result object.
     * 
     * @param id of the result
     * @param type of the href, in the xlink sense.
     * @param href of the result
     */
    protected Result(String id, String type, String href) {
	this.id = id;
	this.type = type;
	this.href = href;
    }
   
    /**
     * Returns the identifier for this result
     * @return id of this parameter or null if not provided.
     */
    public String getId() { 
	return id; 
    }

    /**
     * Returns the type in the, XML XLink sense, of the value returned by getHref.
     * @return type of the result href link or null if not provided.
     */
    public String getType() { 
	return type; 
    }

    /**
     * Returns a String representation of the URI pointing to the result.
     * @return uri pointing the the result resource or null if not provided
     */
    public String getHref() { 
	return href; 
    }

    /**
     * Returns an InputStream with the result resource pointed to by getHref.
     * 
     * @return inputStream containing the TAP service result associated with this Result object.
     *
     * @throws HttpException if the service responses with an unexpected HTTP status.
     * @throws IOException if an error occurs creating the InputStream
     */
    public InputStream openStream() throws HttpException, IOException {
	return HttpClient.get(getHref());
    }

    public int hashCode() {
	if (hash == 0) {
	    hash = 17;
	    hash = 37*hash+(id == null ? 0 : id.hashCode());
	    hash = 37*hash+(href == null ? 0 : href.hashCode());
	    hash = 37*hash+(type == null ? 0 : type.hashCode());
	}
	return hash;
    }

    public boolean equals(Object obj) {
        if (obj == null)
            return false;

        if (obj == this)
            return true;

        if (obj.getClass() != getClass())
            return false;

        Result rhs = (Result) obj;
        return (
		(id != null ? id.equals(rhs.getId()) : rhs.getId() == null) &&
		(href != null ? href.equals(rhs.getHref()) : rhs.getHref() == null) &&
		(type != null ? type.equals(rhs.getType()) : rhs.getType() == null)
		);
    }

    public void list(PrintStream output) throws HttpException, IOException {
	InputStream inputStream = new BufferedInputStream(openStream());
	try {
	    int b = -1;
	    while ((b = inputStream.read()) != -1) {
		output.write(b);
	    }
	} finally {
	    inputStream.close();
	}
    }
}
