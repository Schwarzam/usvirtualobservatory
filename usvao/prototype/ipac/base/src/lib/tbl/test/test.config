[DEFAULT]
module = libtbl_test
input_file = ""
params = ""
test_detail = "a base tbl library test case"
executable = libtbl_test
output = stdout
description = "the tbl library test application exercises the various functions in the library's interface"
compare_method = "file_compare"

# the arguments to the test application are the testtype, an integer from 1 to 13, and a file type (test 10, testing the max number of files
#  limit, does not require a file type), an integer from 1 to 3.  3 is for IPAC ASCII, 1 and 2 are FITS formats.
#
# nominally, the tbl library reads FITS ASCII and FITS Binary files, but in fact a lot of the functionality does not seem to work properly
#  at present.  Since the IPAC format is what is commonly in use, with no known use of FITS, we will proceed with only IPAC ASCII tests for now,
#  and put a lien on the library to assess the FITS support later (remove or fix). (DLM conversation with JCG, 8/6/09)

# test searching for a column by name
[01]
params = 1 3
expected_out = column_search.txt
test_detail = "this test case tests searching for a column by name"

# test getting column info by index
[02]
params = 2 3
expected_out = column_info.txt
test_detail = "this test case tests searching for a column by index"

# test getting column types
[03]
params = 3 3
expected_out = column_type.txt
test_detail = "this test case tests getting the column type"

# test getting column values as strings, regardless of type
[04]
params = 4 3
expected_out = column_val_by_string.txt
test_detail = "this test case tests getting column values as strings"

# test getting column values by their actual type.  test conversion
[05]
params = 5 3
expected_out = column_val_by_type.txt
test_detail = "this test case tests getting column values as distinct types, and the conversion between the columns native type and some user specified type"

# test getting keyword information by index
[06]
params = 6 3
expected_out = key_info.txt
test_detail = "this test case tests getting keyword info by index"

# test getting keyword value by name
[07]
params = 7 3
expected_out = key_value.txt
test_detail = "this test case tests getting keyword values by name"

# test getting a record from the file
[08]
params = 8 3
expected_out = get_record.txt
test_detail = "this test case tests getting a whole record as a string"

# test getting file information
[09]
params = 9 3
expected_out = file_info.txt
test_detail = "this test case tests getting file information"

# test opening more files than the nominal limit
[10]
params = 10
expected_out = file_limit.txt
test_detail = "this test case tests the limit on the maximum number of files that can be opened simultaneously"

# test opening a file with more columns than the nominal limit
[11]
params = 11 3
expected_out = column_limit.txt
test_detail = "this test case tests reading a file with more columns than the nominal limit"

# test reading the number of rows in a file
[12]
params = 12 3
expected_out = num_records.txt
test_detail = "this test case tests getting the number of rows in a file"

# test opening a file with more keywords than the nominal limit
[13]
params = 13 3
expected_out = keyword_limit.txt
test_detail = "this test case tests reading a file with more keywords than the nominal limit"
