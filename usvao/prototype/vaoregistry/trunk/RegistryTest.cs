using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using System.Data.SqlClient;
using System.Text;
using System.Configuration;
using registry;
using ivoa.net.vr1_0;
using ivoa.net.ri1_0.server;
using ivoa.altVOTable;

namespace registry
{
    using NUnit.Framework;
    /// <summary>
    /// 
    /// </summary>
   [TestFixture]
    public class RegistryTest
    {
        private static readonly string testPredicate = "identifier like '%Galex%'";
        private string capability = "";
        private string title = "";
        private string shortname = "";
        private string identifier = "";
        private string publisher = "";
        private string subject = "";
        private string waveband = "";

        private string cmd;
        private DataSet ds = new DataSet();
        private Registry wsRegistry = new Registry();
        private VOTABLE wsreturnedVOT = new ivoa.altVOTable.VOTABLE();
        private TableData wsData = new TableData();

        Random rnd = new Random(); 

       [SetUp]
        public void Init()
        {     
            cmd = SQLHelper.createAdvancedResourceCacheSelect(testPredicate, capability, title, shortname, identifier, publisher, subject, waveband);
             
           //get the data from database  
           ds = GetDatasetFromDB(cmd);

           //get the data from webservice
           wsreturnedVOT = wsRegistry.QueryAdvancedResourceCache(testPredicate, capability, title, shortname, identifier, publisher, subject, waveband);
           wsData = (TableData)wsreturnedVOT.RESOURCE[0].TABLE[0].DATA.Item;

        }

        /// <summary>
        /// only predicate is provided
        /// QueryAdvancedResourceCache() takes 8 input args
        /// if all the fields are empty, return an empty VO table.
        /// otherwise generate the sql command calling following 3 methods.
        /// the sql string starts by SQLHelper.getGetResourceCacheCmd[734].
        /// the middle of the sql string is generated by SQLHelper.createAdvancedResourceCacheSelect[752].
        /// the sql string ends by SQLHelper.getResourceCacheNotNullCmd[738].
        /// after sql string is built, results in VOTable will be turned.
        /// This test case tests two things:
        /// -1. whether the sql string is right.
        /// -2. whether the returned data are right.
        /// </summary>
       [Test]
        public void AssertCmdPredicateString()
        {
           StringBuilder  cmdExp= new StringBuilder();
            cmdExp.Append("select ResourceAsRow ");
            cmdExp.Append("from ResourceVOTableCache inner join resource on resource.pkey = ResourceVOTableCache.rkey ");
            cmdExp.Append (" WHERE [@status]=1 ");
            cmdExp.Append(" and " + testPredicate);
            cmdExp.Append (" and ResourceAsRow is not null");
            //cmd = cmd + " order by ResourceAsRow DESC";

            StringAssert.AreEqualIgnoringCase(cmdExp.ToString(), cmd);
        }

       [Test]
        public void  AssReturnedRowN()
        {
           int dbcount, wscount;           
           dbcount = ds.Tables[0].Rows.Count;
           wscount = wsData.TR.Length;
           //Console.WriteLine("db Rows returned is {0}", dbcount);
           //Console.WriteLine("ws tr returned is {0}", wscount);
           Assert.AreEqual(wscount, dbcount);  
        }

       [Test]
       public void AssRandom100Rows()
        {
           //Random smaple test 100 rows or whole record set.
            DataView dbvw = DBSorted(ds.Tables[0]);
            DataView wsvw = WSSorted(wsData);

            int rdCount = dbvw.Count;
            int maxK = (rdCount > 100)? 10: rdCount;                 

            int foundL = 1;
            int foundH = 1;
            int foundall = 1;
            for (int k = 0; k < maxK; k++)
            {
                int rndN = (rdCount > 100) ? GetRandomInt(0, rdCount) : k;

                for (int i = 0; i < 25; i++)
                {
                    foundL = (dbvw[rndN][i].ToString().Length == wsvw[rndN][i].ToString().Length) ? 1 : 0;
                    if (foundL == 1 && dbvw[rndN][i].ToString().Length > 0)
                    {                        
                        foundH *= (wsvw[rndN][i].ToString() == dbvw[rndN][i].ToString()) ? 1:0;
                        //Console.WriteLine("rndline {0} - cell {1} - found {2} --k={3}", rndN, i, foundL * foundH, k);
                    }
                    if (foundL == 0)
                    {
                        Console.WriteLine("DB {0}", dbvw[rndN][i].ToString());
                        Console.WriteLine("WS {0}", wsvw[rndN][i].ToString());                        
                        Console.WriteLine("-----------------------------------------------------------rndline {0} - cell {1} - found {2} --k={3}", rndN, i, foundL * foundH, k);
                    }
                    foundall *= foundL * foundH;
                }
            }
           
            //Console.WriteLine("found {0}", foundall);
            Assert.AreEqual(1, foundall);
           
       }

       protected int GetRandomInt(int min, int max)
       {
           return rnd.Next(min, max);
       }

       private DataSet GetDatasetFromDB(string queryCmd)
       {
           SqlConnection conn = null;
           DataSet ds = new DataSet();
           try
           {
               conn = new SqlConnection(Registry.sConnect);
               conn.Open();

               SqlDataAdapter sqlDA = new SqlDataAdapter(queryCmd, conn);
               
               sqlDA.Fill(ds);
           }
           finally
           {
               conn.Close();
           }

           return ds;
       }

       private ArrayList GetTDValues(string dbRow)
       {
            ArrayList dbTDs = new ArrayList();
            int start = 0;

            while (start > -1)
            {
                start = dbRow.IndexOf("<TD", start);
                if (start > -1)
                {
                    start += 4;
                    if (dbRow[start] != '/')
                    {
                        string val = dbRow.Substring(start, dbRow.IndexOf("</TD>", start) - start);
                        dbTDs.Add(val);
                    }
                    else
                    {
                        dbTDs.Add("");
                    }
                }
            }
            return dbTDs;
       }
       private DataView DBSorted(DataTable dbtable)
       {
           DataTable dtdb = new DataTable();
           DataColumn column;
           for (int k = 0; k < 26; k++)
           {
               column = new DataColumn();
               column.DataType = System.Type.GetType("System.String");
               column.ColumnName = "col" + k;
               column.Unique = false;
               dtdb.Columns.Add(column);
           }

           foreach (DataRow row in dbtable.Rows)
           {

               DataRow rowcell = dtdb.NewRow();
               ArrayList dbrowal = GetTDValues(row[0].ToString());
               for (int j = 0; j < dbrowal.Count; j++ )
               {
                   string val = dbrowal[j].ToString();
                   //deal with column 19
                   if (j == 19)
                   {
                       if (val.Length > 0 && (!val.Trim().EndsWith("?") && !val.Trim().EndsWith("&amp;")))
                       {
                           if (val.IndexOf('?') >= 0)
                               val = val + "&amp;";
                           else
                               val = val + '?';
                       }
                   }
                   rowcell["col" + j] = val;
               }
               dtdb.Rows.Add(rowcell);

           }
           DataView dbView = new DataView(dtdb);
           dbView.Sort = "col0, col1, col2 ASC,col3 ASC, col4 ASC, col5 ASC, col6 ASC, col19 ASC, col20 ASC";
           return dbView;
       }
       private DataView WSSorted(TableData wsrows)
       {
           DataTable dtws = new DataTable();
           DataColumn column;
           for (int k = 0; k < 26; k++)
           {
               column = new DataColumn();
               column.DataType = System.Type.GetType("System.String");
               column.ColumnName = "col" + k;
               column.Unique = false;
               dtws.Columns.Add(column);
           }
           //foreach (DataColumn col in dtws.Columns)
           //    Console.WriteLine("{0}\t{1}", col.ColumnName, col.DataType);

           foreach (Tr row in wsrows.TR)
           {

               DataRow rowcell = dtws.NewRow();
               int j = 0;
               foreach (Td rcell in row.TD)
               {
                   rowcell["col" + j] = rcell.Value;
                   //Console.WriteLine("<td={0}> {1}</td>", j, rowcell["col"+j]);
                   j++;
               }
               dtws.Rows.Add(rowcell);
           }
           DataView wsView = new DataView(dtws);
           wsView.Sort = "col0, col1, col2 ASC,col3 ASC, col4 ASC, col5 ASC, col6 ASC, col19 ASC, col20 ASC";
           return wsView;
       }
    }
}
