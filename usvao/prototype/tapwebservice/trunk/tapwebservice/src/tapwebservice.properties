# @Deoyani Nandrekar-Heinis
# Application settings for the TAP service

#Data Archive for which this TAP service will be used
database.archive = SDSS
# Database related info
# This is the data which will be supported by tapservice
# ex: this is sdss data
database.UserName = skyuser
database.UserPassword = nchips54
#jtds driver
database.Driver = net.sourceforge.jtds.jdbcx.JtdsDataSource
database.URL = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/BESTDR8

#example using microsoft jdbc driver 
#database.Driver = com.microsoft.sqlserver.jdbc.SQLServerDriver 
#database.URL = jdbc:sqlserver://sdss3b.pha.jhu.edu:1433;databasename=BESTDR8

# storing job and related details
# This database has all tables related to async job and also TAP_Schema
jobs.databaseuser = skytap
jobs.databasepassword = nchips827
jobs.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/deoyani
jobs.database = TAPData
jobs.dbserver = sdss3b
#jobs.databaseUrl = jdbc:jtds:sqlserver://sdss3d.pha.jhu.edu:1433/DeoyaniTAP        
#jobs.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/deoyani   
#jobs.databaseUrl = jdbc:sqlserver://sdss3b.pha.jhu.edu:1433;databasename=deoyani

# Store uploaded tables
upload.databaseuser = skyupload   
upload.databasepassword = nchips87
upload.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/deoyaniTables
#upload.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/deoyaniTables
#provide database name used to query data from uploaded tables
upload.database = TAPUpload
upload.dbserver = sdss3b
#upload.database = deoyaniTables


# Stylesheet to parse ADQL depending on sql server
#ex. this is for SQL server
adql.styleSheet  = ADQL20_SQLSERVER-SPATIAL.xsl

#For RabitMQ
rabbitmq.host = localhost
rabbitmq.vhost = \deo
rabbitmq.portNumber =
rabbitmq.queue.table.submitted = rabbitmq.queue.table.submitted
rabbitmq.exchange.set = jhu.tap.exchange
rabbitmq.queue.submitted = jhu.tap.queue.submitted
rabbitmd.queue.submitted.upload = jhu.tap.queue.submitted.upload
rabbitmq.queue.client_initialized = jhu.tap.client.ini
rabbitmq.queue.server_initialized = jhu.tap.server.ini


#number of queries executed simultaneously (can be edited , preferably not more than 10)
async.jobs = 5
# set max time allowed to execute query in seconds
# this is used when user sets the query execution time, to cross check with this
query.maxexecution = 3600
#set min time allowed to execute query in seconds
query.minexecution = 60

# to store results of async query
results.datadir = H:\\ToShare\\Temp\\
#results.datadir = /export/scratch/tapservice_store/

#example linux
#results.datadir = /export/scratch/tapservice_store/

#Max Number of rows allowed to write in result file
results.servicemaxrecasync = 1000000
#Max nums for the sync job
results.servicemaxrecsync = 10000

#URIs used
uri.ivoa = http://www.ivoa.net/xml
uri.vosi = http://www.ivoa.net/xml/VOSITables/v1.0
uri.vod = http://www.ivoa.net/xml/VODataService/v1.1
uri.uws = http://www.ivoa.net/xml/UWS/v1.0
uri.uwsloc = http://www.ivoa.net/xml/UWS/v1.0
uri.vosicap = http://www.ivoa.net/xml/VOSICapabilities/v1.0
uri.vosiavail = http://www.ivoa.net/xml/VOSIAvailability/v1.0
uri.vospace = http://www.ivoa.net/xml/VOSpace/v2.0
uri.vodloc=   http://www.ivoa.net/xml/VODataService/VODataService-v1.1.xsd
uri.xsi =  http://www.w3.org/2001/XMLSchema-instance
uri.xlink = http://www.w3.org/1999/xlink

#To check connection with databases (used for /availability ) 
# any sample query to run on databases for test
data.testquery = SELECT TOP 10 p.objid FROM PhotoObj as p WHERE  p.u BETWEEN 0 AND 19.6
jobs.testquery = select * from tapjobstable

#version number
version.implemented = 1.0
specification.id = TAP


#Table names reserved in ADQLParser,
# to avoid parser exception put here table names like the following in SDSS
tables.names = ZONE FIRST UNKNOWN

#QUERY Languages supported. Please follow the pattern when you add any new language.
query.lang = |ADQL|ADQL-2.0|SQL|

##For Authentication
jhu.vospace = vos://edu.jhu!vospace
oauth.callbackUrl =  http://azure.pha.jhu.edu:8080/sdss/tap
vospace.base = http://tempsdss.pha.jhu.edu:8080/vospace-2.0
oauth.echoUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/echo
oauth.requestUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/request_token
oauth.authorizationUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/authorize
oauth.accessUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/access_token
oauth.consumerKey = sclient
oauth.consumerSecret = ssecret
#depending on the vospace service this can be chnaged
vospace.dataurl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/rest/nodes
vospace.transfer = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/rest/transfers

###server ports
http.port  = 8080
https.port = 8443
#Application url is used for testing
application.url = http://azure.pha.jhu.edu:8080/sdss/tap
application.webserver = azure.pha.jhu.edu
#machine name
application.servername= azure

## @Deoyani Nandrekar-Heinis
## Application settings for the TAP service
#
## Database related info
## This is the data which will be supported by tapservice
## ex: this is sdss data
#database.UserName = skyuser
#database.UserPassword = nchips54
##jtds driver
#database.Driver = net.sourceforge.jtds.jdbcx.JtdsDataSource
#database.URL = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/BESTDR8
#
##example using microsoft jdbc driver 
##database.Driver = com.microsoft.sqlserver.jdbc.SQLServerDriver 
##database.URL = jdbc:sqlserver://sdss3b.pha.jhu.edu:1433;databasename=BESTDR8
#
## storing job and related details
## This database has all tables related to async job and also TAP_Schema
#jobs.databaseuser = skytap
#jobs.databasepassword = nchips827
#jobs.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/TAPData   
#jobs.database = TAPData
#jobs.dbserver = sdss3b
##jobs.databaseUrl = jdbc:jtds:sqlserver://sdss3d.pha.jhu.edu:1433/DeoyaniTAP        
##jobs.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/deoyani   
##jobs.databaseUrl = jdbc:sqlserver://sdss3b.pha.jhu.edu:1433;databasename=deoyani
#
## Store uploaded tables
#upload.databaseuser = skyupload   
#upload.databasepassword = nchips87
#upload.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/TAPUpload
##upload.databaseUrl = jdbc:jtds:sqlserver://sdss3b.pha.jhu.edu:1433/deoyaniTables
##provide database name used to query data from uploaded tables
#upload.database = TAPUpload
#upload.dbserver = sdss3b
##upload.database = deoyaniTables
#
#
## Stylesheet to parse ADQL depending on sql server
##ex. this is for SQL server
#adql.styleSheet  = ADQL20_SQLSERVER-SPATIAL.xsl
#
##For RabitMQ
#rabbitmq.host = localhost
#rabbitmq.vhost = \deo
#rabbitmq.portNumber =
#rabbitmq.queue.table.submitted = rabbitmq.queue.table.submitted
#rabbitmq.exchange.set = jhu.tap.exchange
#rabbitmq.queue.submitted = jhu.tap.queue.submitted
#rabbitmd.queue.submitted.upload = jhu.tap.queue.submitted.upload
#rabbitmq.queue.client_initialized = jhu.tap.client.ini
#rabbitmq.queue.server_initialized = jhu.tap.server.ini
#
#
##number of queries executed simultaneously (can be edited , preferably not more than 10)
#async.jobs = 5
## set max time allowed to execute query in seconds
## this is used when user sets the query execution time, to cross check with this
#query.maxexecution = 3600
##set min time allowed to execute query in seconds
#query.minexecution = 60
#
## to store results of async query
##results.datadir = H:\\ToShare\\Temp\\
#results.datadir = /export/scratch/tapservice_store/
#
##example linux
##results.datadir = /export/scratch/tapservice_store/
#
##Max Number of rows allowed to write in result file
#results.servicemaxrecasync = 1000000
##Max nums for the sync job
#results.servicemaxrecsync = 10000
#
##URIs used
#uri.ivoa = http://www.ivoa.net/xml
#uri.vosi = http://www.ivoa.net/xml/VOSITables/v1.0
#uri.vod = http://www.ivoa.net/xml/VODataService/v1.1
#uri.uws = http://www.ivoa.net/xml/UWS/v1.0
#uri.uwsloc = http://www.ivoa.net/xml/UWS/v1.0
#uri.vosicap = http://www.ivoa.net/xml/VOSICapabilities/v1.0
#uri.vosiavail = http://www.ivoa.net/xml/VOSIAvailability/v1.0
#uri.vospace = http://www.ivoa.net/xml/VOSpace/v2.0
#uri.vodloc=   http://www.ivoa.net/xml/VODataService/VODataService-v1.1.xsd
#uri.xsi =  http://www.w3.org/2001/XMLSchema-instance
#uri.xlink= http://www.w3.org/1999/xlink
#
##To check connection with databases (used for /availability ) 
## any sample query to run on databases for test
#data.testquery = SELECT TOP 10 p.objid FROM PhotoObj as p WHERE  p.u BETWEEN 0 AND 19.6
#jobs.testquery = select * from tapjobstable
#
##version number
#version.implemented = 1.0
#specification.id = TAP
##
#application.url = http://tempsdss.pha.jhu.edu:8080/sdss/tap
#application.webserver = tempsdss.pha.jhu.edu
##machine name
#application.servername= tempsdss
#
##Table names reserved in ADQLParser to avoid parser exception
##here are some SDSS table names
#tables.names = ZONE FIRST UNKNOWN
#
##QUERY Languages supported. Please follow the pattern when you add any new language.
#query.lang = |ADQL|ADQL-2.0|SQL|
#
####For Authentication
##jhu.vospace = vos://edu.jhu!vospace
##oauth.callbackUrl =  http://azure.pha.jhu.edu:8080/sdss/tap
##vospace.base = http://tempsdss.pha.jhu.edu:8080/vospace-2.0
##oauth.echoUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/echo
##oauth.requestUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/request_token
##oauth.authorizationUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/authorize
##oauth.accessUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/access_token
##oauth.consumerKey = sclient
##oauth.consumerSecret = ssecret
###depending on the vospace service this can be chnaged
##vospace.dataurl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/rest/nodes
##vospace.transfer =http://tempsdss.pha.jhu.edu:8080/vospace-2.0/rest/transfers
#
###For Authentication
#jhu.vospace = vos://edu.jhu!vospace
#oauth.callbackUrl =  http://tempsdss.pha.jhu.edu:8080/sdss/tap
#vospace.base = http://tempsdss.pha.jhu.edu:8080/vospace-2.0
#oauth.echoUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/echo
#oauth.requestUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/request_token
#oauth.authorizationUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/authorize
#oauth.accessUrl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/access_token
#oauth.consumerKey = sclient
#oauth.consumerSecret = ssecret
##depending on the vospace service this can be chnaged
#vospace.dataurl = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/rest/nodes
#vospace.transfer = http://tempsdss.pha.jhu.edu:8080/vospace-2.0/rest/transfers
#
####server ports
#http.port  = 8080
#https.port = 8443