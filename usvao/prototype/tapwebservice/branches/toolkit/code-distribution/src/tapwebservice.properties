# @Deoyani Nandrekar-Heinis
# Application settings for the TAP service

#Data Archive for which this TAP service will be used (application name)
database.archive = oamp

# Description about service and contact details
# This is important because the same message will get displayed in the result file as description.
service.description = DataBase exo at Laboratoire de Astrophysique de Marseille. contact: someone@oamp.fr
# Database related info

### dbtypes : MSSQL, MySQL, PostgresSQL (Use the same cases)
database.type = PostgreSQL

## user with select permissions on database containing data to be served by this service
database.UserName = javauser
database.UserPassword = javauser
database.Driver = org.postgresql.Driver
database.URL =jdbc:postgresql://cesamdb:5432/exodat
database.database = exodat
database.server = cesamdb

# storing job and related details
# This database has all tables related to async job and also TAP_Schema
jobs.databaseuser = tap
jobs.databasepassword = tap2012
jobs.databaseUrl = jdbc:postgresql://xls2.oamp.lan:5432/tap
jobs.database = tap
jobs.dbserver =  xls2.oamp.lan

# Store uploaded tables
upload.databaseuser = tap   
upload.databasepassword = tap2012
upload.databaseUrl =  jdbc:postgresql://xls2.oamp.lan:5432/tap
#provide database name used to query data from uploaded tables
upload.database = tap
upload.dbserver = temp

# Stylesheet to parse ADQL depending on sql server (comment/uncomment according to requirement)

#ex. this is for SQL server (MSSQL)
#adql.styleSheet  = ADQL20_SQLSERVER.xsl

#MySQL
#adql.styleSheet  = ADQL20_MYSQL.xsl

#PostgreSQL
adql.styleSheet  = ADQL20_POSTGRES.xsl

#For RabitMQ
rabbitmq.host = localhost
rabbitmq.vhost = \deo
rabbitmq.portNumber =
rabbitmq.queue.table.submitted = rabbitmq.queue.table.submitted
rabbitmq.exchange.set = jhu.tap.exchange
rabbitmq.queue.submitted = jhu.tap.queue.submitted
rabbitmd.queue.submitted.upload = jhu.tap.queue.submitted.upload
rabbitmq.queue.client_initialized = jhu.tap.client.ini
rabbitmq.queue.server_initialized = jhu.tap.server.ini


#number of queries executed simultaneously (can be edited , preferably not more than 10)
async.jobs = 5
# set max time allowed to execute query in seconds
# this is used when user sets the query execution time, to cross check with this
query.maxexecution = 3600
#set min time allowed to execute query in seconds
query.minexecution = 60

# to store results of async query(check the end /)
results.datadir =  /home/sheinis/deo/TaToo/scratch/tapresults/

#Max Number of rows allowed to write in result file
results.servicemaxrecasync = 1000000

#Max nums for the sync job
results.servicemaxrecsync = 10000

#URIs used
uri.ivoa = http://www.ivoa.net/xml
uri.vosi = http://www.ivoa.net/xml/VOSITables/v1.0
uri.vod = http://www.ivoa.net/xml/VODataService/v1.1
uri.uws = http://www.ivoa.net/xml/UWS/v1.0
uri.uwsloc = http://www.ivoa.net/xml/UWS/v1.0
uri.vosicap = http://www.ivoa.net/xml/VOSICapabilities/v1.0
uri.vosiavail = http://www.ivoa.net/xml/VOSIAvailability/v1.0
uri.vospace = http://www.ivoa.net/xml/VOSpace/v2.0
uri.vodloc=   http://www.ivoa.net/xml/VODataService/VODataService-v1.1.xsd
uri.xsi =  http://www.w3.org/2001/XMLSchema-instance
uri.xlink = http://www.w3.org/1999/xlink

#To check connection with databases (used for /availability ) 
# any sample query to run on databases for test
data.testquery = SELECT * from exo_cat limit 100
jobs.testquery = select * from tap_schema.tapjobstable limit 10

#version number
version.implemented = 1.0
specification.id = TAP

#Table names reserved in ADQLParser,
# to avoid parser exception put here table names like the following in SDSS
# which can be keywords not all table names
tables.names = ZONE FIRST UNKNOWN

#QUERY Languages supported. Please follow the pattern when you add any new language.
query.lang = |ADQL|ADQL-2.0|SQL|

### If you are supporting  your vospace otherwise not needed *************************
##For Authentication
used.vospace = vos://edu.jhu!vospace
oauth.callbackUrl =  http://<tname>.pha.jhu.edu:8080/sdss-dr9/tap
vospace.base = http://<name>.pha.jhu.edu:8080/vospace-2.0
oauth.echoUrl = http://<name>.pha.jhu.edu:8080/vospace-2.0/echo
oauth.requestUrl = http://<name>.pha.jhu.edu:8080/vospace-2.0/request_token
oauth.authorizationUrl = http://<name>.pha.jhu.edu:8080/vospace-2.0/authorize
oauth.accessUrl = http://<name>.pha.jhu.edu:8080/vospace-2.0/access_token
oauth.consumerKey = *****
oauth.consumerSecret = *****
#depending on the vospace service this can be chnaged
vospace.dataurl = http://<name>.pha.jhu.edu:8080/vospace-2.0/rest/nodes
vospace.transfer = http://<name>.pha.jhu.edu:8080/vospace-2.0/rest/transfers
####***********************************************************************************

###server ports
http.port  = 8080
https.port = 8443

#### Not needed 
#Application url is used for testing
application.url = http://localhost:8080/oamp/tap
application.webserver = localhost
#machine name
application.servername= localhost
