import java.io.*;
import java.net.*;
import java.net.URI;
import java.net.URLEncoder;
import java.util.*;
import java.util.Random;
import java.lang.reflect.*;
import java.text.*;
import java.sql.*;

//deliberately inserting an error in dec
public class Cone extends Service
{    
     
    private String ncsaurl;

    public String getValUrl()
    {      
       	
	String query     = "http:" + validatorurl + "heasarc" + getRandomInt() + "&endpoint=http:";//	
        String add       =  "&RA=" + ra +  "&DEC=" + dec + "&SR=" + sr;		
	add              +=  "&format=xml&show=fail&op=Validate";
	try
	    {
		String encoded   = URLEncoder.encode(baseurl, "UTF-8");	       	       
		query            = query +  encoded +add;
		System.out.println("Cone Test: " + query);
	    }	   
	catch(UnsupportedEncodingException e)
	    {
		System.out.println(e);
	    }
	return query;	    
    }  
    public ArrayList test_default(ArrayList array, int runid, String date, String id)
    {
	//query, serviceId,stmt,type,utc ,connection, errorcodes,validatorid,shortname;  
	System.out.println(baseurl);
	System.out.println("Testing:" +  (String) array.get(8));
	String handlername = "MyContentHandler";
	ValidatorResponseParser vrp            = new ValidatorResponseParser((String) array.get(0), handlername);
	ArrayList array_subtestobjects = null;
	
	
	array_subtestobjects        =  vrp.parseDocument();
	
	   
	      
	if (urlerror != null)
	    {
		Object lastobj  = (SubTest) array_subtestobjects.set(0,urlerror);
		array_subtestobjects.add(lastobj);
	    }
        
	if (array_subtestobjects.size() == '0')
	    {
		array = addZeroSizeArray(array, runid, date);
	    }	   
	else
	    {
		SubTest subempty = (SubTest) array_subtestobjects.get(0);	
		array.add(new Integer(runid));
		array.add(array_subtestobjects);
		array.add(date);			
	    }	   
	return array;
    }
}
