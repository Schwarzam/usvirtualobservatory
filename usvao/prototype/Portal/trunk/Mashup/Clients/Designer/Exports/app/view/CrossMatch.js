/*
 * File: app/view/CrossMatch.js
 * Date: Thu May 16 2013 09:08:04 GMT-0400 (EDT)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpd.view.CrossMatch', {
    extend: 'Mvpd.view.ui.CrossMatch',
    statics: {
        optionMap: {
            simbad: { valueField: 'simbad', displayField: 'Simbad'},
            twomass: { valueField: '2mass', displayField: '2Mass'}
        }
    },

    initComponent: function() {
        var me = this;
        
        // Add filetype options.
        var opt = Mvpd.view.CrossMatch.optionMap;
        var CDSTableStore = Ext.create('Ext.data.Store', {
            storeId: 'CDSTableStore',
            fields: ['displayField', 'valueField'],
            data: [
                    opt['simbad'],
                    opt['twomass']
                ]
        });
        
        me.callParent(arguments);

        // Get direct references to important components.
        this.xMatchButton = this.query('#xMatchButton')[0];
        this.cancelButton = this.query('#cancelButton')[0];
        this.CDSTablePulldown = this.query('#CDSTablePulldown')[0];
        
        // Cross-match handler
        this.xMatchButton.on('click', this.crossMatchHandler, this);
        
        // Built-in defaults.
        this.CDSTablePulldown.setValue('simbad');
                
        // Set up internal cancel handler.
        this.cancelButton.on('click', this.closeWindow, this);
    },
    
    closeWindow: function () {
        this.hide();
        this.destroy();
    },

    crossMatchHandler: function() {
        // Get the data that needs to be uploaded to the server for export.
        var table = this.grid.getExportTable(true);
        var store = this.grid.getStore();
        var colra2 = store.getRaColName();
        var coldec2 = store.getDecColName();

        if (table) {
            var options = {
                filename: this.filename,
                filetype: 'votable',
                filtercolumns: true,
                attachment: false,
                responseFunction: this.crossMatchFileReady,
                data: table,
                button: this.exportButton,
                colra2: colra2,
                coldec2: coldec2,
                controller: this.grid.controller
            };

            Ext.log('filename = ' + options.filename);
            Ext.log('filetype = ' + options.filetype);
            Ext.log('filtercolumns = ' + options.filtercolumns);
            Ext.log('attachment = ' + options.attachment);

            Mvp.util.Exporter.activate(options);

            this.closeWindow();
        } else {
            Ext.log('No data available to export');
        }
    },
    
    crossMatchFileReady: function (responseObject, requestOptions, queryScope, complete, updated) {
        Ext.log('Exporter.onResponse: complete = ' + complete + ", updated = " + updated);
        if (complete) {
            // Get the URL and start the cross-match.
            var data = responseObject.data;
            if (data) {
                // Let's try something new.  Instead of a separate adaptor, and having to manage all the parameter permutations there,
                // we'll build the URL here, and just use the generic VOTable adaptor.
                // http://cdsxmatch.u-strasbg.fr/xmatch/api/v1/sync?REQUEST=xmatch&cat1=simbad&cat2=[TABLEURL]&colRA2=[COLRA2]&colDEC2=[COLDEC2]&distMaxArcsec=22&RESPONSEFORMAT=votable
                var remoteCat = 'simbad';
                var distMaxArcsec = 22;
                var xmatchUrl = 'http://cdsxmatch.u-strasbg.fr/xmatch/api/v1/sync?REQUEST=xmatch&cat1=' + remoteCat +
                    '&cat2=' + data.url +
                    '&colRA2=' + queryScope.outsideScope.colra2 +
                    '&colDEC2=' + queryScope.outsideScope.coldec2 +
                    '&distMaxArcsec=' + distMaxArcsec +
                    '&RESPONSEFORMAT=votable';
            
                xmatchUrl = Mvp.util.Util.fixAccessUrl(xmatchUrl);
                
                var args = { url: xmatchUrl, inputText: xmatchUrl,
                    title: 'XMatch Results', description: 'XMatch Results'
                };
                
                var searchParams = Mvp.search.SearchParams.getSearch('VOTable');
                searchParams.downloadEnabled = true;
                Mvp.gui.DetailsWindow.closeDetailsWindow();
                queryScope.outsideScope.controller.invokeSearch(args, searchParams);    
                
            }
        } else if (updated) {
            // Um, nothing to do, I guess
        } else {
            // Also nothing to do.  Just wait for a complete response.
        }
    }


});