/*
 * File: app/view/TopBarContainer.js
 * Date: Thu Jan 12 2012 05:26:11 GMT-0500 (Eastern Standard Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */


Ext.define('Mast.view.MastTopBar', {
    extend: 'Mvpc.view.ui.TopBarContainer',
    requires: [
        'Mvp.util.Util',
        'Mvp.util.SearchBox',
        'Mvp.util.Uploader',
        'Mast.view.AboutPanel'
    ],
    statics: {

        tourHelpURL: 'data/html/MastHelp.html',
        moreExamplesHelpURL: 'data/html/MastHelp.html#Search',
        homePage: 'http://archive.stsci.edu/',
        logoImageLocation: 'data/images/mastlogo_thumb.png',
        logoWidth: 75,
        logoHeight: 75,

        // SearchBox panel and component dimensions
        sbPanelWidth: 800,
        actionChooserWidth: 330,
        exampleWidth: 350,
        searchBoxes: {},
		instances: {},

        injectSearchText: function (el, searchBoxId) {
            // amazingly, this has to be left at the Portal level to behave the way we want it
            // the TopBarContainer constructor cannot refer to itself in HTML after it has executed
            var value = el.innerHTML;
            var searchBox = Mast.view.MastTopBar.searchBoxes[searchBoxId];
            if (value) {
                Ext.log('Injecting <' + value + '> into search box.');
                searchBox.setValue(value);
            } else {
                Ext.log('Unable to find value to inject into search box.');
            }
        },
		
		openUploadWindow: function(el, instanceId) {
			var topBar = Mast.view.MastTopBar.instances[instanceId];
			Mvp.util.Uploader.showDialog(topBar);
		}
    },

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.addEvents('newsearch');

        this.searchParams = config.searchParams;
        this.defaultSearch = config.defaultSearch;
        this.versionString = config.versionString;

        delete config.searchParams;
        delete config.defaultSearch;
        delete config.versionString;

        // Searches will be accessed via their uid, so create this index.
        this.searchIndex = {};
        for (var i = 0; i < this.searchParams.length; i++) {
            this.searchIndex[this.searchParams[i].uid] = this.searchParams[i];
        }


        // Make sure we have some height.
        config.height = 95;

        this.callParent(arguments);
        this.logoContainer = this.getComponent('logoContainer');
        this.actionPanel = this.getComponent('actionPanel');
        this.searchPanel = this.getComponent('searchPanel');

        var tbcStatics = Mast.view.MastTopBar;

        var searchBoxWidth = tbcStatics.sbPanelWidth - tbcStatics.actionChooserWidth;

        var logo = Ext.create('Ext.Component', {
            html: Mvp.util.Util.createImageLink(tbcStatics.homePage, tbcStatics.logoImageLocation, "MAST Home",
								  tbcStatics.logoWidth, tbcStatics.logoHeight)
        });
        this.logoContainer.setSize(tbcStatics.logoWidth, tbcStatics.logoHeight);
        this.logoContainer.add(logo);

        this.searchParamStore = Mvp.search.SearchParams.createStore(this.searchParams)

        this.searchBox = Ext.create('Mvp.util.SearchBox', {
            width: searchBoxWidth,
            height: 25
        });
        this.searchBox.on('searchInitiated', this.doSearch, this);

        // Save the search box for injectSearchText().
        Mast.view.MastTopBar.searchBoxes[this.searchBox.id] = this.searchBox;
        this.searchPanel.add(this.searchBox);

        this.actionChooser = Ext.create('Ext.form.ComboBox', {
            store: this.searchParamStore,
            queryMode: 'local',
            forceSelection: true,
            editable: false,
            displayField: 'text',
            width: tbcStatics.actionChooserWidth,
            height: 25,
            valueField: 'uid'
        });


        this.actionPanel.add(Ext.create('Ext.form.field.Display'), {
            width: tbcStatics.actionChooserWidth,
            style: { 'text-align': 'left' },
            border: 0,
            html: '<font size="+1">Select Collection:</font>'
        });
        this.searchPanel.add(Ext.create('Ext.form.field.Display'), {    // line up the search box
            style: { 'text-align': 'left' },
            border: 0,
            html: '<font size="+1">Search:</font>'
        });

        this.actionPanel.add(this.actionChooser);

        this.searchPanel.add(this.searchBox);

        // Add the placeholder for the resolver summary text.
        this.resolverSummaryPanel = new Ext.form.field.Display({
            fieldLabel: 'Object:',
            hidden: true,
            hideMode: 'visibility',
            labelAlign: 'right',
            labelSeparator: '&nbsp;',
            labelStyle: 'font-weight:bold;font-style:italic',
            labelWidth: tbcStatics.actionChooserWidth,
            width: tbcStatics.sbPanelWidth,
            value: ''
        });
		
		// An overkill way to allow the upload link to work even in the unlikely
		// event there are more than one instance of this class.
        Mast.view.MastTopBar.instances[this.id] = this;

        var s = "'" + this.versionString + "'";
        var html = Mvp.util.Util.createLink(tbcStatics.tourHelpURL, 'User Guide') + ' | ' +
                '<a href="javascript: void(0)" onclick="Mast.view.AboutPanel.show(' + s + ')")">';
        html += 'Demo Portal v' + this.versionString + '...</a>';
        html += ' | <a href="javascript: void(0)" onclick="Mast.view.MastTopBar.openUploadWindow(this, ' +
            "'" + this.id + "'" + ')">Upload File...</a>';
        this.infoBar = Ext.create('Ext.form.Label', {
            id: 'infoBar',
            width: tbcStatics.actionChooserWidth,
            style: { 'text-align': 'left' },
            border: 0,
            html: html
        });
        this.actionPanel.add(this.infoBar);

        html = 'Examples: ' +
            '<a href="javascript: void(0)" onclick="Mast.view.MastTopBar.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">M101</a>, ' +
            '<a href="javascript: void(0)" onclick="Mast.view.MastTopBar.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">14 03 12.6 +54 20 56.7 r=0.2d</a>, ' +
            Mvp.util.Util.createLink(tbcStatics.moreExamplesHelpURL, 'more...');
        this.exampleDisplay = Ext.create('Ext.form.Label', {
            margin: '0 0 0 2',  // there is a tiny margin around the text input I can't get rid of
            width: tbcStatics.exampleWidth + 100,
            html: html
        });
        this.searchPanel.add(this.exampleDisplay);

        this.searchAllButton = Ext.create('Ext.button.Button', {
            width: 75,
            text: 'Search All',
            hidden: true
        });
        this.searchAllButton.addListener('click', this.searchAll, this);
        this.searchPanel.add(this.searchAllButton);

        // Set the initial value of the actionChooser combo.  Needs to be at the end here
        // because the change callback references some of the other components.
        this.actionChooser.on('change', this.actionChanged, this);
        this.actionChooser.setValue(this.defaultSearch);
    },

    searchAll: function () {
        var searchUid = this.actionChooser.getValue();
        var searchParams = this.getSearch(searchUid);
        var searchInput = {
            inputText: ''
        }

        Ext.log('Search invoked for: ' + searchUid);

        this.fireEvent('newsearch', searchInput, searchParams);
    },

    doSearch: function (searchText) {
        var searchUid = this.actionChooser.getValue();
        var searchParams = this.getSearch(searchUid);
        var searchInput = {
            inputText: searchText
        }

        Ext.log('Search invoked for: ' + searchText);

        this.fireEvent('newsearch', searchInput, searchParams);
    },

    actionChanged: function (field, newValue, oldValue, options) {
        var searchUid = this.actionChooser.getValue();
        var searchParams = this.getSearch(searchUid);

        var currentSearchText = this.searchBox.getValue();
        var currentHint = this.searchBox.getHint();
        var hintChanged = (currentHint !== searchParams.hint);

        if (searchParams.inputType != 'positionOneBox') {
            this.searchBox.hide();
            this.exampleDisplay.hide();
            this.searchAllButton.show();
        }
        else {
			if (searchParams.resolve || (searchParams.uid == 'SANTA')) {
				this.searchBox.show();
				this.exampleDisplay.show();
				this.searchAllButton.hide();
			} else {
				this.searchBox.show();
				this.exampleDisplay.hide();
				this.searchAllButton.hide();
			}
        }

        // Set the new empty text value.
        this.searchBox.setHint(searchParams.hint);

        // If the search box was empty, or if there's a new hint, force it to display the new hint.
        if ((currentSearchText === '') || hintChanged) {
            this.searchBox.reset();

            // Hide the resolver summary if new action does not use it
            if (this.resolverSummaryPanel) {
                if (searchParams.resolve) {
                    this.resolverSummaryPanel.show();
                } else {
                    this.resolverSummaryPanel.hide();
                    this.resolverSummaryPanel.setValue('');
                }
            }
        }
    },

    getSearch: function (searchUid) {
        var search = this.searchIndex[searchUid];
        if (search) {
            search = Ext.clone(search);  // Return a copy to protect the original definitions here.
        }
        return search;
    }
});