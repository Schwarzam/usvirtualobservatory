/*
 * File: app/view/TopBarContainer.js
 * Date: Thu Jan 12 2012 05:26:11 GMT-0500 (Eastern Standard Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */


Ext.define('Vao.view.VaoTopBarDownTime', {
    extend: 'Mvpc.view.ui.TopBarContainer',
    requires: [
        'Mvp.util.Util',
        'Mvp.util.SearchBox',
        'Mvpd.view.VaoPositionSearchPanel',
        'Mvp.util.Uploader',
        'Ext.form.ComboBox',
        'Ext.form.field.Display'
    ],
    statics: {

        tourHelpURL: 'http://www.usvao.org/documents/DataDiscoveryTool/UserGuide/index.html',
        moreExamplesHelpURL: 'http://www.usvao.org/documents/DataDiscoveryTool/UserGuide/index.html#Search',
        homePage: 'http://www.usvao.org/',
        logoImageLocation: 'data/images/VAO_logo_200.png', // 'data/images/ElPortal.jpg'
        logoWidth: 140,  // 130
        logoHeight: 70,   // 70

        // SearchBox panel and component dimensions
        sbPanelWidth: 750,
        actionChooserWidth: 325,
        exampleWidth: 350,
        searchBoxes: {},
        instances: {},

        injectSearchText: function (el, searchBoxId) {
            // amazingly, this has to be left at the Portal level to behave the way we want it
            // the TopBarContainer constructor cannot refer to itself in HTML after it has executed
            var value = el.innerHTML;
			var id = searchBoxId || Vao.view.VaoTopBar.defaultSearchBoxId;
            var searchBox = Vao.view.VaoTopBar.searchBoxes[id];
            if (value) {
                Ext.log('Injecting <' + value + '> into search box.');
                searchBox.setValue(value);
            } else {
                Ext.log('Unable to find value to inject into search box.');
            }
        },

        openUploadWindow: function (el, instanceId) {
            var topBar = Vao.view.VaoTopBar.instances[instanceId];
            Mvp.util.Uploader.showDialog(topBar);
        },

        showAboutWindow: function (versionString) {
            var title = 'VAO Data Discovery Tool';
            html = '<div style="text-align: center; margin: 0px;">' +
		            '<h3 style="color: black;font-size: 20px;">' + title +
		            '</h3>Version ' + versionString + '</div>';

            var aboutWindow = Ext.create('Ext.window.Window', {
                layout: 'fit',
                width: 300,
                height: 150,
                modal: true,
                constrainHeader: true,
                items: Ext.create('Ext.container.Container', {
                    html: html,
                    margin: '10 10 10 10'
                })
            });
            aboutWindow.show();
        }
    },

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.addEvents('newsearch');

        this.searchParams = config.searchParams;
        this.defaultSearch = config.defaultSearch;
        this.versionString = config.versionString;

        delete config.searchParams;
        delete config.defaultSearch;
        delete config.versionString;

        // Searches will be accessed via their uid, so create this index.
        this.searchIndex = {};
        for (var i = 0; i < this.searchParams.length; i++) {
            this.searchIndex[this.searchParams[i].uid] = this.searchParams[i];
        }


        // Make sure we have some height.
        config.height = 90; //window.innerHeight;
        //Ext.EventManager.onWindowResize(function () { if (!window.properHeight) this.setHeight(window.innerHeight) }, this);
        // This allows the scrollbar during the presearch "naked" view
        config.autoScroll = true;

        this.callParent(arguments);
        this.logoContainer = this.getComponent('logoContainer');
        this.actionPanel = this.getComponent('actionPanel');
        this.searchPanel = this.getComponent('searchPanel');

        var tbcStatics = Vao.view.VaoTopBar;

        var searchBoxWidth = tbcStatics.sbPanelWidth - tbcStatics.actionChooserWidth;

        var logo = Ext.create('Ext.Component', {
            html: Mvp.util.Util.createImageLink(tbcStatics.homePage, tbcStatics.logoImageLocation, "Home",
								  tbcStatics.logoWidth, tbcStatics.logoHeight)
        });
        this.logoContainer.setSize(tbcStatics.logoWidth, tbcStatics.logoHeight);
        this.logoContainer.add(logo);

        this.searchParamStore = Mvp.search.SearchParams.createStore(this.searchParams)

        // One box search.
        this.searchBox = Ext.create('Mvp.util.SearchBox', {
            width: searchBoxWidth,
            height: 25
        });
        this.searchBox.on('searchInitiated', this.doSearch, this);

        // Three box search.
        this.searchThreeBox = Ext.create('Mvpd.view.VaoPositionSearchPanel', {});
        this.searchThreeBox.on('searchInitiated', this.doThreeSearch, this);

        // Save the search box for injectSearchText().
        Vao.view.VaoTopBar.searchBoxes[this.searchBox.id] = this.searchBox;
        Vao.view.VaoTopBar.searchBoxes[this.searchThreeBox.id] = this.searchThreeBox;
		
		// For use outside this class, save the id of the default injectable search box.
		Vao.view.VaoTopBar.defaultSearchBoxId = this.searchThreeBox.id;
		Vao.view.VaoTopBar.defaultThis = this;
		
        //this.searchPanel.add(this.searchBox);
        //this.searchPanel.add(this.searchThreeBox);

        this.actionChooser = Ext.create('Ext.form.ComboBox', {
            store: this.searchParamStore,
            queryMode: 'local',
            forceSelection: true,
            editable: false,
            displayField: 'text',
            width: tbcStatics.actionChooserWidth,
            height: 25,
            valueField: 'uid'
        });

        this.actionPanel.add(Ext.create('Ext.toolbar.TextItem', {
            width: tbcStatics.actionChooserWidth,
            // margin: '10 0 0 0',
            text: '&nbsp;',
            style: { 'font-size': '128%' }
        }));
        //if (AppConfig.fullSearchOnly) {
        //    this.actionPanel.add(Ext.create('Ext.toolbar.TextItem', {
        //        width: tbcStatics.actionChooserWidth,
        //        margin: '3 0 5 0',
        //        text: '&nbsp;&nbsp;&nbsp;&nbsp;Search All Virtual Observatory Collections:',
        //        style: { 'font-size': '128%' }
        //    }));
        //}
		
		this.actionPanel.add(Ext.create('Ext.toolbar.TextItem', {
			width: tbcStatics.actionChooserWidth,
			margin: '3 0 5 0',
			text: '&nbsp;&nbsp;&nbsp;&nbsp;Service Currently Unavailable',
			style: { 'font-size': '128%' }
		}));
		
		
        this.searchPanel.add(Ext.create('Ext.toolbar.TextItem', {   // line up the search box
            text: '&nbsp;',
            style: { 'font-size': '128%' }
        }));
        if (!AppConfig.fullSearchOnly) {
            //this.actionPanel.add(this.actionChooser);
        }

        //this.searchPanel.add(this.searchBox);
        //this.searchPanel.add(this.searchThreeBox);

        // An overkill way to allow the upload link to work even in the unlikely
        // event there are more than one instance of this class.
        Vao.view.VaoTopBar.instances[this.id] = this;

        var s = "'" + this.versionString + "'";
        var html = Mvp.util.Util.createLink(tbcStatics.tourHelpURL, 'User Guide') + ' | ' +
                '<a href="javascript: void(0)" onclick="Vao.view.VaoTopBar.showAboutWindow(' + s + ')")">';
        html += 'Discovery Tool v' + this.versionString + '...</a>';
        this.infoBar = Ext.create('Ext.form.Label', {
            id: 'infoBar',
            width: tbcStatics.actionChooserWidth,
            style: { 'text-align': 'center' },
            border: 0,
            html: html
        });
        //this.actionPanel.add(this.infoBar);

        html = 'Examples: ' +
            '<a href="javascript: void(0)" onclick="Vao.view.VaoTopBar.injectSearchText(this, ' +
            "'" + this.searchThreeBox.id + "'" + ')">M101</a>, ' +
            '<a href="javascript: void(0)" onclick="Vao.view.VaoTopBar.injectSearchText(this, ' +
            "'" + this.searchThreeBox.id + "'" + ')">14 03 12.6 +54 20 56.7</a>, ' +
            Mvp.util.Util.createLink(tbcStatics.moreExamplesHelpURL, 'more...');
        this.exampleThreeDisplay = Ext.create('Ext.form.Label', {
            margin: '0 0 0 4',  // there is a tiny margin around the text input I can't get rid of
            width: tbcStatics.exampleWidth + 100,
            html: html
        });
        //this.searchPanel.add(this.exampleThreeDisplay);

        html = 'Examples: ' +
            '<a href="javascript: void(0)" onclick="Vao.view.VaoTopBar.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">M101</a>, ' +
            '<a href="javascript: void(0)" onclick="Vao.view.VaoTopBar.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">14 03 12.6 +54 20 56.7 r=0.2d</a>, ' +
            Mvp.util.Util.createLink(tbcStatics.moreExamplesHelpURL, 'more...');
        this.exampleDisplay = Ext.create('Ext.form.Label', {
            margin: '0 0 0 2',  // there is a tiny margin around the text input I can't get rid of
            width: tbcStatics.exampleWidth + 100,
            html: html
        });
        //this.searchPanel.add(this.exampleDisplay);

        this.searchAllButton = Ext.create('Ext.button.Button', {
            width: 75,
            text: 'Search All',
            hidden: true
        });
        this.searchAllButton.addListener('click', this.searchAll, this);
        //this.searchPanel.add(this.searchAllButton);

        // Set the initial value of the actionChooser combo.  Needs to be at the end here
        // because the change callback references some of the other components.
        this.actionChooser.on('change', this.actionChanged, this);
        this.actionChooser.setValue(this.defaultSearch);
    },

    searchAll: function () {
        var searchUid = this.actionChooser.getValue();
        var searchParams = this.getSearch(searchUid);
        var searchInput = {
            inputText: ''
        }

        Ext.log('Search invoked for: ' + searchUid);

        this.fireEvent('newsearch', searchInput, searchParams);
    },

    doSearch: function (searchText) {
        var searchUid = this.actionChooser.getValue();
        var searchParams = this.getSearch(searchUid);
        var searchInput = {
            inputText: searchText
        }

        Ext.log('Search invoked for: ' + searchText);

        this.fireEvent('newsearch', searchInput, searchParams);
    },

    doThreeSearch: function (textValues) {
        var searchUid = 'DataScopeVao';
        if (!AppConfig.fullSearchOnly) {
            searchUid = this.actionChooser.getValue();
        }

        var textWithRadius = textValues[0];
        var textOnly = textValues[1];

        var searchParams = this.getSearch(searchUid);
        var searchInput = {
            inputText: textWithRadius
        }

        Ext.log('Search invoked for: ' + textWithRadius);

        this.fireEvent('newsearch', searchInput, searchParams);
    },

    actionChanged: function (field, newValue, oldValue, options) {
        var searchUid = this.actionChooser.getValue();
        var searchParams = this.getSearch(searchUid);

        var currentSearchText = this.searchBox.getValue();
        var currentHint = this.searchBox.getHint();
        var hintChanged = (currentHint !== searchParams.hint);

        if (searchParams.inputType == 'searchButton') {
            // Search all
            this.searchBox.hide();
            this.searchThreeBox.hide();
            this.exampleDisplay.hide();
            this.exampleThreeDisplay.hide();
            this.searchAllButton.show();
        }
        else if (searchParams.inputType == 'positionThreeBox') {
            // Position three box
            this.searchBox.hide();
            this.searchThreeBox.show();
            this.exampleDisplay.hide();
            this.exampleThreeDisplay.show();
            this.searchAllButton.hide();
        }
        else {
            if (searchParams.resolve) {
                // Position one box
                this.searchBox.show();
                this.searchThreeBox.hide();
                this.exampleDisplay.show();
                this.exampleThreeDisplay.hide();
                this.searchAllButton.hide();
            } else {
                // Non-position one box
                this.searchBox.show();
                this.searchThreeBox.hide();
                this.exampleDisplay.hide();
                this.exampleThreeDisplay.hide();
                this.searchAllButton.hide();
            }
        }

        // Set the new empty text value.
        this.searchBox.setHint(searchParams.hint);

        // If the search box was empty, or if there's a new hint, force it to display the new hint.
        if ((currentSearchText === '') || hintChanged) {
            this.searchBox.reset();

        }
    },

    getSearch: function (searchUid) {
        var search = this.searchIndex[searchUid];
        if (search) {
            search = Ext.clone(search);  // Return a copy to protect the original definitions here.
        }
        return search;
    }
});