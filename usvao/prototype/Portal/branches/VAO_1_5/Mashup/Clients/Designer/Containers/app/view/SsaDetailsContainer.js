/*
 * File: app/view/SsaDetailsContainer.js
 * Date: Mon Mar 12 2012 13:05:07 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.SsaDetailsContainer', {
    extend: 'Mvpc.view.ui.SsaDetailsContainer',

    initComponent: function() {
        this.callParent(arguments);
    },

    constructor: function(config) {
        this.callParent(arguments); // set up basic Container class variables
        var record = config.record;
        var updateObject = config.controller.getLastUpdateObject();
        this.columns = updateObject.columnInfo.columns;

        var toolbar = this.getComponent('summaryPanel').getComponent('detailsToolbar');

        var downloadButton = toolbar.getComponent('downloadButton');
        downloadButton.setHandler(this.downloadRecords, this);

        var sampBroadcast = toolbar.getComponent('sampBroadcast');
        sampBroadcast.setHandler(this.broadcastSpectra, this);

        summaryContainer = this.getComponent('summaryPanel').getComponent('summaryContainer');

        var title = summaryContainer.getComponent('spectraTitle');
        var titleColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /meta\.title/);
        if( !titleColumn ){
            titleColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /meta\.id/);
        }
        if( !titleColumn ){
            titleColumn = Mvp.util.TableUtils.getColumnNameByUtype(this.columns, /Query\.LName/);
        }
        title.setValue(this.record.get(titleColumn));

        var type = summaryContainer.getComponent('spectraFormat');
        type.setValue(this.getType());

        var fovBox = summaryContainer.getComponent('fieldOfView');
        var name = this.controller.getTitle();
        if( name.match(/NED\/SED/) ){
            fovBox.setVisible(false);
            type.setValue("xml");
            type.fieldLabel = "SED Format";
            title.fieldLabel = "SED Title";
        }else{
            var ra = fovBox.getComponent('centerRa');
            var raColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /pos\.eq\.ra/);
            if( raColumn == null ){
                raColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /POS_EQ_RA_MAIN/i);
            }
            var raValue = this.record.get(raColumn);
            ra.setValue(Ext.util.Format.number(raValue, '0.000000'));

            var dec = fovBox.getComponent('centerDec');
            var decColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /pos\.eq\.dec/);
            if( decColumn == null ){
                decColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /POS_EQ_DEC_MAIN/i);
            }
            var decValue = this.record.get(decColumn);
            dec.setValue(Ext.util.Format.number(decValue, '0.000000'));
        }

        // dump contents into lower panel
        var detailsPanel = this.getComponent('detailsPanel');
        var c = Ext.create('Mvpc.view.GenericDetailsContainer', {
            record: record,
            controller: config.controller });
        detailsPanel.add(c);
    },

    downloadRecords: function() {
        // alert("Image name: " + this.makeName());
        var urlColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /meta\.ref\.url/),
            name = this.controller.getTitle();
        var url = this.record.get(urlColumn);
        if (Mvp.util.Util.isFtpUrl(url)) {
            Mvp.util.Exporter.download(url)
        } else if (name.match(/NED\/SED/)) {
            Mvp.util.Exporter.downloadUrl('http://vo.ned.ipac.caltech.edu' + encodeURI(this.record.get('URL_TO_GET_NED_Photometry')), this.makeName());
        } else {
            Mvp.util.Exporter.downloadUrl(encodeURI(url), this.makeName());
        }
    },

    broadcastSpectra: function() {
        var name = this.controller.getTitle();
        var rowMeta = {};
        var url = null;
        
        if(name.match(/NED\/SED/) ){
            url = 'http://vo.ned.ipac.caltech.edu' + encodeURI(this.record.get('URL_TO_GET_NED_Photometry'));
            rowMeta['Access.Format'] = "text/xml";
        } else {
            var urlColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /meta\.ref\.url/);
            if( urlColumn == null ){
                urlColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /data_link/i);
            }
        
            var ucdColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /VOX\:Spectrum_Format/);
            if( ucdColumn ){
                rowMeta['VOX:Spectrum_Format'] = this.record.get(ucdColumn);
            }
        
            var utypeColumn = Mvp.util.TableUtils.getColumnNameByUtype(this.columns, /Access\.Format/);
            if( utypeColumn ){
                rowMeta['Access.Format'] = this.record.get(utypeColumn);
            }else if(this.getType() == "fits"){
                rowMeta['Access.Format'] = "application/fits";
            }
        
            var utypeColumn = Mvp.util.TableUtils.getColumnNameByUtype(this.columns, /Dataset\.Length/);
            if( utypeColumn ){
                rowMeta['Dataset.Length'] = this.record.get(utypeColumn).toString();
            }
            url = this.record.get(urlColumn);
        }
        
        Mvp.util.SampManager.sendSpectra(url, this.makeName(), rowMeta);
    },

    makeName: function() {
        var name = this.controller.getTitle();

        var instrumentColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /INST_ID/);
        if (instrumentColumn != null) {
            var instrumentTitle = this.record.get(instrumentColumn);
            name = instrumentTitle + '_' + name;
        }

        var titleColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /meta\.title/);
        if( !titleColumn ){
            titleColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /meta\.id/);
        }
        if( !titleColumn ){
            titleColumn = Mvp.util.TableUtils.getColumnNameByUtype(this.columns, /Query\.LName/);
        }
        var title = this.record.get(titleColumn);
        name = title + '_' + name;

        var type = this.getType();
        
        return Mvp.util.Util.filenameCreator(name, type);
    },
    
    getType: function() {
        var typeColumn = Mvp.util.TableUtils.getColumnNameByUCD(this.columns, /VOX\:Spectrum_Format/);
        if( !typeColumn ){
            typeColumn = "format";
        }
        
        var type = this.record.get(typeColumn);
        if( !type ){
            type = "file";
        }
        
        var index = type.indexOf('/');
        if (index >= 0) {
            type = type.substring(index + 1);
        }
        
        
        return type.toLowerCase();
    }
});