/*
 * File: app/view/TextFacetContainer.js
 * Date: Thu Aug 23 2012 11:03:23 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.TextFacetContainer', {
    extend: 'Mvpc.view.ui.TextFacetContainer',

    requires: ['Mvp.util.Util'],

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        Ext.apply(config, this);
        this.callParent(arguments);

        this.addListener('render', function (fs) {
            var html = this.tip;
            if (html) {
                fs.legend.on("render", function (leg) {
                    Ext.create('Ext.tip.ToolTip', {
                        target: leg.getEl(),
                        //title: 'Column Details',
                        html: html,
                        width: 200,
                        dismissDelay: 0
                    });
                    return leg;
                });
            }
            return fs;
        }, this);

        this.setTitle(' ' + (this.cc.text || this.itemId));
        var exclude = this.cc.facetExclude || [];
        var translation = this.cc.translation;
        var defaultNum = this.cc.defaultNumAllowed;
        var cgLen = (defaultNum && (defaultNum * 5 <= this.columnGroup.length)) ? defaultNum * 5 : this.columnGroup.length;
        this.checkboxes = [];

        this.extraCheckboxes = Ext.create('Ext.container.Container', {
            width: 274,
            layout: 'column',
            itemId: 'extraCheckboxes',
            hidden: true
        });
        for (var j = 0; (j < cgLen); j++) {
            var val = this.columnGroup[j];
            //if (!val.key) val.key = '<none>';
            if (!val.key) continue;
            var key = val.key;
            var k = exclude.length;
            var excludeThis = false;
            while (k--) {
                if (exclude[k] == key) {
                    excludeThis = true;
                    break;
                }
            }
            if (excludeThis) continue;
            key = (translation && translation[key]) || key;
            var cb = Ext.create('Ext.form.Checkbox', {
                width: 170,
                boxLabel: key,      // the possibly truncated checkbox text
                itemId: val.key     // itemId is full key value
            });
            var v = Mvp.util.Util.escapeRegExp(val.key);
            cb.addListener('change', this.parent.filter, this.parent, { column: this.itemId, value: v, separator: this.parent.facets[this.index].separator, separatorType: this.parent.facets[this.index].separatorType });
            var labelText = (this.parent.staticCounts) ? '(' + val.count + ' Total)' : '(' + val.count + ' of ' + val.count + ')';

            var count = Ext.create('Ext.form.Label', {   // create a separate label for the count (the text field in a checkbox can't be changed, apparently)
                width: 80,      // 80 pixels should fit a "4-digit of 4-digit" selection with a typical font
                text: labelText,
                itemId: val.key + 'Count',
                style: {
                    'text-align': 'right'
                }
            });
            this.checkboxes.push(cb, count);
            this.originalCounts.push({ column: this.itemId, key: val.key, count: val.count });
            (!defaultNum || (j < defaultNum)) ? this.add([cb, count]) : this.extraCheckboxes.add([cb, count]);
        }

        this.add(this.extraCheckboxes);
        this.moreButton = Ext.create('Ext.button.Button', {
            text: 'More',
            hidden: !defaultNum || (this.checkboxes.length <= defaultNum),
            margins: '10 0 0 0',
            listeners: {
                click: this.morePressed,
                scope: this
            }
        });

        this.lessButton = Ext.create('Ext.button.Button', {
            text: 'Less',
            hidden: true,
            margins: '10 0 0 0',
            listeners: {
                click: this.lessPressed,
                scope: this
            }
        });

        this.add(Ext.create('Ext.container.Container', {
            layout: 'hbox',
            width: 270,
            pack: 'center',
            align: 'top',
            items: [this.moreButton, this.lessButton]
        }));
    },

    morePressed: function () {
        this.extraCheckboxes.show();
        this.lessButton.show();
        this.moreButton.hide();
    },

    lessPressed: function () {
        this.extraCheckboxes.hide()
        this.lessButton.hide();
        this.moreButton.show();
    }
});