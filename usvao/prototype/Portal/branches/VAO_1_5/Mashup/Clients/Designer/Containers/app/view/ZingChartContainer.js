/*
 * File: app/view/JqPlotContainer.js
 * Date: Wed Sep 05 2012 15:31:15 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.ZingChartContainer', {
    extend: 'Mvpc.view.ui.ZingChartContainer',

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.callParent(arguments);
        this.store = config.store;
        this.facets = config.facets;
        delete config.facets;
        
        var facetData = [];
        this.facetLookup = {};
        this.numericFacets = [];
        for (var i in this.facets) {
            var facet = this.facets[i];
            var text = facet.niceName || i;
            if (facet.chartType == 'Numeric') {
                this.numericFacets.push({ title: text, unit: facet.unit, index: facet.index, key: i });
                facetData.push({ displayField: text, valueField: i });
                this.facetLookup[i] = text;
            }
        }

        var facetStore =
            Ext.create('Ext.data.Store', {
            fields: ['displayField', 'valueField'],
            data: facetData
        });
        
        this.configPanel = this.getComponent('configPanel');
        this.seriesPanel = this.configPanel.getComponent('seriesContainer');
        this.chartContainer = this.getComponent('chartContainer').getComponent('chartContainer');
        
        this.xComboBox = Ext.create('Ext.form.field.ComboBox', {
            store: facetStore,
            displayField: 'displayField',
            valueField: 'valueField',
            matchFieldWidth: false,
            width: 130,
            labelWidth: 10,
            fieldLabel: 'X'
        });
        this.yComboBox = Ext.create('Ext.form.field.ComboBox', {
            store: facetStore,
            displayField: 'displayField',
            valueField: 'valueField',
            matchFieldWidth: false,
            width: 130,
            labelWidth: 10,
            fieldLabel: 'Y'
        });

        var container = Ext.create('Ext.container.Container', {
            items: [this.xComboBox, this.yComboBox],
            layout: 'hbox'
        });
        this.seriesPanel.add(container);

        this.xComboBox.setValue(this.numericFacets[0].key);
        this.yComboBox.setValue(this.numericFacets[1].key);

        this.drawButton = this.configPanel.getComponent('drawButton');
        this.drawButton.on({
            click: this.draw,
            scope: this
        });
    },

    xChange: function () {

    },

    yChange: function () {

    },

    init: function () {
        this.draw();
        this.addListener('resize', this.resize, this);
        this.configPanel.on({
            collapse: this.resize,
            expand: this.resize,
            scope: this
        });
    },

    resize: function () {
        // use this to handle any generic event that should redraw the plot without changing the bounds
        // this way you don't need a different function for however many arguments the event passes
        this.draw(true);
    },

    draw: function (keepBounds) {
        //if (keepBounds !== true) {
            this.dataArray = [];
            this.xField = this.xComboBox.getValue();
            this.yField = this.yComboBox.getValue();
            this.store.backingStore.each(function (record) {
                this.dataArray.push([record.get(this.xField), record.get(this.yField)]);
            }, this);
            this.xmin = this.store.backingStore.min(this.xField);
            this.xmax = this.store.backingStore.max(this.xField);
            this.ymin = this.store.backingStore.min(this.yField);
            this.ymax = this.store.backingStore.max(this.yField);
            /*
        }
        else {
            this.xmin = this.plot.axes.xaxis.min;
            this.xmax = this.plot.axes.xaxis.max;
            this.ymin = this.plot.axes.yaxis.min;
            this.ymax = this.plot.axes.yaxis.max;
        }
        */

            zingchart.render({
                //liburl: '../Shared/charts/zingchart.swf',
                //width: 600,
                //height: 300,
                container: this.chartContainer.getId(),
                data: {
                    "show-progress": false,
                    "graphset": [{
                        "scale-x": {
                            "zooming": true,
                            decimals: 4,
                            //step: (this.xmax - this.xmin) / 10,
                            step: .001,
                            minValue: this.xmin,
                            maxValue: this.xmax
                        },
                        "scale-y": {
                            "zooming": true,
                            decimals: 4,
                            minValue: this.ymin,
                            maxValue: this.ymax
                        },
                        "type": "scatter",
                        "plotarea": {
                            "position": "0% 0%",
                            "margin-top": 10,
                            "margin-right": 50,
                            "margin-left": 60,
                            "margin-bottom": 25
                        },
                        tooltip: {
                            text: '(%k, %v)'
                        },
                        "series": [{
                            "values": this.dataArray,
                            "text": "Item 0"
                        }]
                    }]
                },
                showwatermark: true
            });
        /*
        var zoomObj = { "xmin": this.xmin, "xmax": this.xmax, "ymin": this.ymin, "ymax": this.ymax };
        zingchart.exec(this.chartContainer.getId(), "zoomto", zoomObj);*/

            
        this.exists = true;
    }
});