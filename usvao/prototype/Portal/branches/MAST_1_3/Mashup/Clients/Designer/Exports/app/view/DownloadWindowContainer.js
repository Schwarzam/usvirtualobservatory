/*
 * File: app/view/DownloadWindowContainer.js
 * Date: Thu May 17 2012 15:25:25 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpd.view.DownloadWindowContainer', {
    extend: 'Mvpd.view.ui.DownloadWindowContainer',

    statics: {

        optionMap: {
            zip: { valueField: 'zip', displayField: 'Zip', extension: 'zip' },
            tar: { valueField: 'tar', displayField: 'TAR', extension: 'tar' }
        }
    },

    initComponent: function () {

        // Add filetype options.
        var opt = Mvpd.view.DownloadWindowContainer.optionMap;
        var formatStore = Ext.create('Ext.data.Store', {
            storeId: 'FormatStore',
            fields: ['displayField', 'valueField'],
            data: [
                    opt['zip'],
                    opt['tar']
                ]
        });

        this.callParent(arguments);

        // Get direct references to important components.
        this.formPanel = this.getComponent('downloadPanel').getComponent('fileFieldset').getComponent('formPanel');
        this.downloadButton = this.formPanel.getComponent('buttonContainer').getComponent('downloadButton');
        this.cancelButton = this.formPanel.getComponent('buttonContainer').getComponent('cancelButton');
        this.filenameField = this.query('#filenameField')[0];
        this.formatPulldown = this.query('#FormatPulldown')[0];

        this.downloadButton.on('click', this.downloadHandler, this);

        // Set up internal cancel handler.
        this.cancelButton.on('click', this.closeWindow, this);
        this.formatPulldown.on('change', this.filetypeChanged, this);

    },

    closeWindow: function () {
        this.hide();
        this.destroy();
    },

    setFilename: function (value) {
        this.filenameField.setValue(value);
    },

    getFilename: function () {
        var filename = this.filenameField.getValue();

        return filename;
    },

    setFiletype: function (filetype) {
        this.formatPulldown.setValue(filetype);
    },

    getFiletype: function () {
        var filetype = this.formatPulldown.getValue();

        return filetype;
    },

    setFileExtension: function (extension) {
        var currentVal = this.getFilename();
        var newVal = currentVal.replace(/\.[^\.]*$/, '.' + extension);
        this.setFilename(newVal);
    },

    filetypeChanged: function (formField, newValue, oldValue, eOpts) {
        var newFiletype = this.formatPulldown.getValue();
        var extension = Mvpd.view.DownloadWindowContainer.optionMap[newFiletype].extension;
        Ext.log('Setting export file extension to ' + extension);
        this.setFileExtension(extension);
    },

    downloadHandler: function () {
        var store = this.controller.store;
        var records = store.getSelectedRecords();
        var len = records.length;
        if (!len) {
            Ext.Msg.alert({ msg: 'You must select at least one record to download...', title: 'Error' });
            var task = new Ext.util.DelayedTask(function () { Ext.Msg.close() });
            task.delay(2000);
            return;
        }
        this.downloadButton.disable();
        this.downloadButton.setText('Building download bundle...');
        var fileList = records[0].get('dataURI');
        for (var i = 1; i < len; i++) {
            if (records[i].get('dataURI')) fileList += ', ' + records[i].get('dataURI');
        }

        var request = {
            service: 'Mast.Distribution.Request',
            params: {
                filelist: fileList,
                filename: this.getFilename().replace('.' + this.getFiletype(), '')
            }
        };
        this.query = Ext.create('Mvp.util.MashupQuery', {
            request: request,
            ajaxParams: { method: 'POST' },
            onResponse: this.onResponse,
            onError: this.onError,
            onFailure: this.onFailure,
            scope: this
        });
        this.query.run(true);
    },

    onResponse: function (responseObject, requestOptions, queryScope, complete, updated) {
        Ext.log('DownloadWindowContainer.onResponse: complete = ' + complete + ", updated = " + updated);
        if (complete) {
            // Get the URL and start the download.
            this.complete = complete;
            var data = responseObject.data;
            if (data && data.url) {
                Ext.log('Opening as an attachment: ' + data.url);
                Ext.log("download() url: " + url);
                Ext.core.DomHelper.append(document.body, {
                    tag: 'iframe',
                    frameBorder: 0,
                    width: 0,
                    height: 0,
                    css: 'display:none;visibility:hidden;height:1px;',
                    src: data.url
                });
            }
            this.downloadButton.enable();
            this.downloadButton.setText('Download');
            this.close();
        }
    },

    onError: function (responseObject, requestOptions, queryScope, complete) {
        Ext.log('DownloadWindowContainer.onError() called');
    },

    onFailure: function (responseObject, requestOptions, queryScope) {
        Ext.log('DownloadWindowContainer.onFailure() called');
    }
});