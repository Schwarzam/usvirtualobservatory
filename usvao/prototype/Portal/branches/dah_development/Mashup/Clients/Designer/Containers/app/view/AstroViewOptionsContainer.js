/*
 * File: app/view/AstroViewOptionsContainer.js
 * Date: Thu Jul 19 2012 16:13:39 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.AstroViewOptionsContainer', {
    extend: 'Mvpc.view.ui.AstroViewOptionsContainer',
    alias: 'widget.optionsTabPanel',

    statics: {
        optionMap: {
            dss: { valueField: 'dss', displayField: 'DSS layers: 4-12' },
            galex: { valueField: 'galex', displayField: 'GALEX layers: 4-10' },
            sdss: { valueField: 'sdss', displayField: 'SDSS layers: 4-12' },
            galexNuv: { valueField: 'galex-nuv', displayField: 'GALEX-NUV layers: 4-10' },
            galexFuv: { valueField: 'galex-fuv', displayField: 'GALEX-FUV layers: 4-10' },
            dust: { valueField: 'dust', displayField: 'DUST (WWT) layers: 4-6' },
            halpha: { valueField: 'halpha', displayField: 'HALPHA (WWT) layers: 4-6' },
            wmap: { valueField: 'wmap', displayField: 'WMAP (WWT) layers: 4-6' }
        },

        injectSearchText: function (el, searchBoxId) {
            var value = el.innerHTML;
            var searchBox = Mvpc.view.AstroViewOptionsContainer.searchBoxes[searchBoxId];
            if (value) {
                //Ext.log('Injecting <' + value + '> into search box.');
                searchBox.setValue(value);
            } else {
                //Ext.log('Unable to find value to inject into search box.');
            }
        }
    },

    initComponent: function () {
        var me = this;

        var opt = Mvpc.view.AstroViewOptionsContainer.optionMap;
        var surveyStore = Ext.create('Ext.data.Store', {
            storeId: 'surveyStore',
            fields: ['displayField', 'valueField'],
            data: [
                    opt['dss'],
                    opt['galex'],
                    opt['sdss'],
                    opt['galexNuv'],
                    opt['galexFuv'],
                    opt['dust'],
                    opt['halpha'],
                    opt['wmap']
                ]
        });

        me.callParent(arguments);

        this.surveyContainer = this.query('#surveyContainer')[0];
        this.surveyCombo = Ext.create('Ext.form.ComboBox', {
            store: surveyStore,
            fieldLabel: 'Survey',
            labelWidth: 40,
            width: 275,
            displayField: 'displayField',
            valueField: 'valueField'
        });
        this.surveyCombo.setValue('dss');
        this.surveyContainer.add(this.surveyCombo);
        this.searchBox = this.query('#searchText')[0];

        if (!Mvpc.view.AstroViewOptionsContainer.searchBoxes) Mvpc.view.AstroViewOptionsContainer.searchBoxes = {};
        Mvpc.view.AstroViewOptionsContainer.searchBoxes[this.searchBox.id] = this.searchBox;

        var html = '<table width="290"><tr><td width="100"><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">M101</a></td><td><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">13h03m12.6s +54d20m56.7s</a></tr><tr><td width="100"><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">M87 r=1.0d</a></td><td><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">14 03 12.6 54 20 56.7</a></tr><tr><td width="100"><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">Antennae</a></td><td><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">14:03.210 54:20.945</td></tr><tr><td width="100"><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">0 0 r=180d</a></td><td><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">180.468 -18.866 r=0.4</a></td></tr><tr><td><a href="javascript: void(0)" onclick="Mvpc.view.AstroViewOptionsContainer.injectSearchText(this, ' +
            "'" + this.searchBox.id + "'" + ')">Virgo Cluster</a>';
        examplesContainer = Ext.create('Ext.container.Container', {
            html: html
        });
        this.query('#resetButton')[0].addListener('click', this.resetGraphics, this);
        this.query('#brightenButton')[0].addListener('click', this.brightenGraphics, this);
        this.query('#examplesFieldset')[0].add(examplesContainer);
        this.brightnessSlider = this.query('#brightnessSlider')[0];
        this.contrastSlider = this.query('#contrastSlider')[0];
        this.wireCheckbox = this.query('#wireCheckbox')[0];
        this.colorCheckbox = this.query('#colorCheckbox')[0];
        this.textCheckbox = this.query('#textCheckbox')[0];
        this.debugCheckbox = this.query('#debugCheckbox')[0];
        this.wireCheckbox.hide();
        this.textCheckbox.hide();
        this.colorCheckbox.hide();
        this.debugCheckbox.addListener('change', this.debugCheckboxChanged, this);
        this.wireCheckbox.addListener('change', this.wireCheckboxChanged, this);
        this.colorCheckbox.addListener('change', this.colorCheckboxChanged, this);
        this.textCheckbox.addListener('change', this.textCheckboxChanged, this);
        this.debugCheckbox.setValue(AppConfig && AppConfig.isDebug);
    },

    resetGraphics: function () {
        this.brightnessSlider.setValue(50);
        this.contrastSlider.setValue(50);
    },

    brightenGraphics: function () {
        this.brightnessSlider.setValue(75);
        this.contrastSlider.setValue(100);
    },

    debugCheckboxChanged: function (el, to, from, opts) {
        if (!to) {
            this.colorCheckbox.setValue(false);
            this.textCheckbox.setValue(false);
            this.wireCheckbox.setValue(false);
            this.colorCheckbox.hide();
            this.textCheckbox.hide();
            this.wireCheckbox.hide();
        }
        else {
            this.colorCheckbox.show();
            this.textCheckbox.show();
            this.wireCheckbox.show();
        }
    },

    wireCheckboxChanged: function (el, to, from, opts) {
        this.fireEvent('avGraphicsModeChanged', 'wire', to)
    },

    colorCheckboxChanged: function (el, to, from, opts) {
        this.fireEvent('avGraphicsModeChanged', 'color', to)
    },

    textCheckboxChanged: function (el, to, from, opts) {
        this.fireEvent('avGraphicsModeChanged', 'text', to)
    }


});