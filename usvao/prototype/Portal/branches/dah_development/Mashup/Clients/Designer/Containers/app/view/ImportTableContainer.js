/*
 * File: app/view/ImportTableContainer.js
 * Date: Fri May 25 2012 11:11:22 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.ImportTableContainer', {
    extend: 'Mvpc.view.ui.ImportTableContainer',
    requires: ['Mvp.util.Uploader', 'Ext.form.field.File', 'Ext.form.Panel'],

    statics: {

        optionMap: {
            csv: { valueField: 'csv', displayField: 'CSV', extension: 'csv', uid: 'CSV' },
            vot: { valueField: 'vot', displayField: 'VO Table', extension: 'xml', uid: 'VOTable' }
        }
    },

    initComponent: function () {

        this.callParent(arguments);
    },

    constructor: function (config) {
        // Add filetype options before initializing
        var opt = Mvpc.view.ImportTableContainer.optionMap;
        var formatStore = Ext.create('Ext.data.Store', {
            storeId: 'FormatStore',
            fields: ['displayField', 'valueField'],
            data: [
                    opt['csv'],
                    opt['vot']
                ]
        });
        Ext.apply(config, this);
        this.callParent(arguments);
        this.formatPulldown = this.getComponent('importPanel').getComponent('formatPulldown');
        this.formatPulldown.setValue('csv');

        this.fileField = Ext.create('Ext.form.field.File', {
            id: 'form-file',
            width: 350,
            emptyText: 'Select a file to import',
            name: 'file-path',
            buttonText: '...'
        })

        this.importPanel = Ext.create('Ext.form.Panel', {
            fileUpload: true,
            layout: 'hbox',
            itemId: 'importPanel',
            margin: '10 0 0 0',
            border: false,
            items: [this.fileField,
            {
                margin: '0 0 0 10',
                xtype: 'button',
                id: 'importButton',
                text: 'Import',
                handler: this.importFile,
                scope: this
            }]
        });

        this.getComponent('importPanel').add(this.importPanel);
    },

    getFiletype: function () {
        var opt = Mvpc.view.ImportTableContainer.optionMap;
        return opt[this.formatPulldown.getValue()].uid;
    },

    importFile: function () {
        var f = this.importPanel.getForm();
        var uploader = Mvp.util.Uploader;
        this.filename = this.fileField.getValue();
        var pos = this.filename.lastIndexOf('\\');
        if (pos == -1) pos = this.filename.lastIndexOf('/');
        if (pos != -1) this.filename = this.filename.substr(++pos); // pos is now the start of the leaf name
        uploader.uploadFile(f, this.viewSavedCallback, this);
        this.close();
    },

    viewSavedCallback: function (f, action, scope) {
        var result = Ext.decode(action.response.responseText);
        var url = result.data;
        var title = this.filename;
        var description = 'Uploaded file ' + this.filename;
        this.loadFile(url, title, description, this.getFiletype());
    },

    loadFile: function (url, title, description, service) {
        var searchInput = { url: url, inputText: url,
            title: title, description: description
        };

        var searchParams = Mvp.search.SearchParams.getSearch(service);
        this.portalScope.fireEvent('newsearch', searchInput, searchParams);
    }
});