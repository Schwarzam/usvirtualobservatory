/*
 * File: app/view/ChartContainer.js
 * Date: Mon Oct 31 2011 12:57:38 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.require('Ext.example.*');
Ext.define('Mvpc.view.ChartContainer', {
    extend: 'Mvpc.view.ui.ChartContainer',

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.callParent(arguments);
        this.store = config.store;
        this.niceColumnNames = config.niceColumnNames;

        this.categoryFacets = config.facets.categoryFacets;
        this.decimalFacets = config.facets.decimalFacets;
        var xItems = [], yItems = [];


        for (var i in this.decimalFacets) {
            var text = this.decimalFacets[i].column;
            for (var j in this.niceColumnNames) {
                var c = this.niceColumnNames[j];
                if (c.column == this.decimalFacets[i].column) {
                    text = c.niceName;
                    break;
                }
            }
            xItems.push({
                xtype: 'radiofield',
                boxLabel: text,
                inputValue: text,
                handler: this.xAxisHandler,
                name: 'xAxis',
                checked: (i == 0),
                width: 130,
                scope: this
            });
            yItems.push({
                xtype: 'radiofield',
                boxLabel: text,
                inputValue: text,
                handler: this.yAxisHandler,
                checked: (i == 1),
                name: 'yAxis',
                width: 130,
                scope: this
            });
        }

        for (var i in this.categoryFacets) {
            var text = this.categoryFacets[i].column;

            for (var j in this.niceColumnNames) {
                var c = this.niceColumnNames[j];
                if (c.column == this.categoryFacets[i].column) {
                    text = c.niceName;
                    break;
                }
            }
            xItems.push({
                xtype: 'radiofield',
                boxLabel: text,
                inputValue: this.categoryFacets[i].column,
                handler: this.xAxisHandler,
                name: 'xAxis',
                width: 130,
                scope: this,
                disabled: !isDevelopment
            });
        }

        this.chartPanel = this.getComponent('chartPanel');
        this.chartContainer = this.chartPanel.getComponent('chartContainer');
        this.propertiesPanel = this.getComponent('propertiesPanel');
        this.chartTypeButton = this.propertiesPanel.getComponent('chartTypeField').getComponent('chartHeaderContainer').getComponent('chartTypeButton');
        if (!isDevelopment) this.chartTypeButton.disable();
        var chartTypeMenu = this.chartTypeButton.menu,
            areaMenu = chartTypeMenu.getComponent('areaMenu'),
            barMenu = chartTypeMenu.getComponent('barMenu'),
            columnMenu = chartTypeMenu.getComponent('columnMenu'),
            lineMenu = chartTypeMenu.getComponent('lineMenu'),
            scatterMenu = chartTypeMenu.getComponent('scatterMenu');
        areaMenu.addListener('click', this.updateChartType, this, { type: 'Area' });
        barMenu.addListener('click', this.updateChartType, this, { type: 'Bar' });
        columnMenu.addListener('click', this.updateChartType, this, { type: 'Column' });
        lineMenu.addListener('click', this.updateChartType, this, { type: 'Line' });
        scatterMenu.addListener('click', this.updateChartType, this, { type: 'Scatter' });

        this.markerTypeButton = this.propertiesPanel.getComponent('markersField').getComponent('markersContainer').getComponent('iconButton');
        var markerTypeMenu = this.markerTypeButton.menu,
            circle = markerTypeMenu.getComponent('circle'),
            square = markerTypeMenu.getComponent('square'),
            triangle = markerTypeMenu.getComponent('triangle'),
            line = markerTypeMenu.getComponent('line'),
            plus = markerTypeMenu.getComponent('plus'),
            cross = markerTypeMenu.getComponent('cross'),
            diamond = markerTypeMenu.getComponent('diamond'),
            arrow = markerTypeMenu.getComponent('arrow');
        circle.addListener('click', this.updateMarkerType, this, { type: 'Circle' });
        square.addListener('click', this.updateMarkerType, this, { type: 'Square' });
        triangle.addListener('click', this.updateMarkerType, this, { type: 'Triangle' });
        line.addListener('click', this.updateMarkerType, this, { type: 'Line' });
        plus.addListener('click', this.updateMarkerType, this, { type: 'Plus' });
        cross.addListener('click', this.updateMarkerType, this, { type: 'Cross' });
        diamond.addListener('click', this.updateMarkerType, this, { type: 'Diamond' });
        arrow.addListener('click', this.updateMarkerType, this, { type: 'Arrow' });

        var markerSizeSlider = this.propertiesPanel.getComponent('markersField').getComponent('markersContainer').getComponent('markerSizeSlider');
        markerSizeSlider.addListener('changeComplete', this.updateMarkerSize, this);

        this.axesContainer = this.propertiesPanel.getComponent('axesContainer');
        this.xAxisPanel = this.axesContainer.getComponent('xAxisPanel').getComponent('xAxisContainer');
        this.yAxisPanel = this.axesContainer.getComponent('yAxisPanel').getComponent('yAxisContainer');
        this.xRangeContainer = this.propertiesPanel.getComponent('rangeField').getComponent('xRangeContainer');
        this.yRangeContainer = this.propertiesPanel.getComponent('rangeField').getComponent('yRangeContainer');
        var xAutoCheckbox = this.xRangeContainer.getComponent('xAutoCheckbox'),
            yAutoCheckbox = this.yRangeContainer.getComponent('yAutoCheckbox');
        if (!isDevelopment) {
            xAutoCheckbox.hide();
            yAutoCheckbox.hide();
        }
        xAutoCheckbox.addListener('change', this.xAutoRangeHandler, this);
        yAutoCheckbox.addListener('change', this.yAutoRangeHandler, this);
        this.xRangeContainer.getComponent('xMinText').addListener('specialkey', this.rangeHandler, this);
        this.xRangeContainer.getComponent('xMaxText').addListener('specialkey', this.rangeHandler, this);
        this.yRangeContainer.getComponent('yMinText').addListener('specialkey', this.rangeHandler, this);
        this.yRangeContainer.getComponent('yMaxText').addListener('specialkey', this.rangeHandler, this);

        this.xAxisPanel.add(xItems);
        this.yAxisPanel.add(yItems);
        var initialX = this.decimalFacets[0].column,
            initialY = this.decimalFacets[1].column
        this.rendererConfiguration = {      // assume there are at least 2 facets, charts button should have been disabled if not
            xField: initialX,
            yField: initialY,
            label: 'Scatter',
            chartType: 'scatter',
            xAxisType: 'Numeric',
            autoX: true,
            autoY: true,
            xRange: [this.store.min(initialX), this.store.max(initialX)],
            yRange: [this.store.min(initialY), this.store.max(initialY)],
            markerSize: 3,
            markerType: 'circle'
        };

        this.xRangeContainer.getComponent('xMinText').setValue(this.rendererConfiguration.xRange[0]);
        this.xRangeContainer.getComponent('xMaxText').setValue(this.rendererConfiguration.xRange[1]);
        this.yRangeContainer.getComponent('yMinText').setValue(this.rendererConfiguration.yRange[0]);
        this.yRangeContainer.getComponent('yMaxText').setValue(this.rendererConfiguration.yRange[1]);

        this.refresh();

    },

    rangeHandler: function (caller, event, options) {
        if (event.getKey() == event.ENTER) {
            if (!this.rendererConfiguration.autoX) {
                var minText = this.xRangeContainer.getComponent('xMinText'),
            maxText = this.xRangeContainer.getComponent('xMaxText');
                this.rendererConfiguration.xRange = [minText.getValue(), maxText.getValue()];
            }
            if (!this.rendererConfiguration.autoY) {
                var minText = this.yRangeContainer.getComponent('yMinText'),
            maxText = this.yRangeContainer.getComponent('yMaxText');
                this.rendererConfiguration.yRange = [minText.getValue(), maxText.getValue()];
            }
            this.refresh();
        }
    },

    xAutoRangeHandler: function (caller, val) {
        var minText = this.xRangeContainer.getComponent('xMinText'),
            maxText = this.xRangeContainer.getComponent('xMaxText'),
            f = this.rendererConfiguration.xField,
            max = this.store.max(f),
            min = this.store.min(f);
        minText.setValue(min);
        maxText.setValue(max);
        this.rendererConfiguration.xRange = [min, max];

        if (val) {
            minText.disable();
            maxText.disable();
            this.rendererConfiguration.autoX = true;
        }
        else {
            minText.enable()
            maxText.enable();
            this.rendererConfiguration.autoX = false;
        }
        this.refresh();
    },

    yAutoRangeHandler: function (caller, val) {
        var minText = this.yRangeContainer.getComponent('yMinText'),
            maxText = this.yRangeContainer.getComponent('yMaxText'),
            f = this.rendererConfiguration.yField,
            max = this.store.max(f),
            min = this.store.min(f);
        minText.setValue(min);
        maxText.setValue(max);
        this.rendererConfiguration.yRange = [min, max];

        if (val) {
            minText.disable();
            maxText.disable();
            this.rendererConfiguration.autoY = true;
        }
        else {
            minText.enable()
            maxText.enable();
            this.rendererConfiguration.autoY = false;
        }
        this.refresh();
    },

    yAxisHandler: function (caller, toVal) {
        if (toVal) {
            var val = caller.getSubmitValue();
            this.rendererConfiguration.yField = val;
            for (var i in this.niceColumnNames) {
                var c = this.niceColumnNames[i];
                if (val == c.niceName) {
                    this.rendererConfiguration.yField = c.column;
                    break;
                }
            }
            //this.refresh();
            this.yRangeContainer.getComponent('yAutoCheckbox').setValue(false);
            this.yRangeContainer.getComponent('yAutoCheckbox').setValue(true);
        }
    },

    xAxisHandler: function (caller, toVal) {
        if (toVal) {
            var val = caller.getSubmitValue();
            this.rendererConfiguration.xField = val;
            for (var i in this.niceColumnNames) {
                var c = this.niceColumnNames[i];
                if (val == c.niceName) {
                    this.rendererConfiguration.xField = c.column;
                    break;
                }
            }

            this.rendererConfiguration.xAxisType = 'Numeric';
            for (var i in this.categoryFacets) {
                var c = this.categoryFacets[i];
                if (c.column == this.rendererConfiguration.xField) {
                    this.rendererConfiguration.xAxisType = 'Category';
                    break;
                }
            }
            this.xRangeContainer.getComponent('xAutoCheckbox').setValue(false);
            this.xRangeContainer.getComponent('xAutoCheckbox').setValue(true);
        }
    },

    updateMarkerType: function (caller, event, config) {
        this.markerTypeButton.setText(config.type);
        this.rendererConfiguration.markerType = config.type.toLowerCase();
        this.refresh();
    },

    updateChartType: function (caller, event, config) {
        this.chartTypeButton.setText(config.type);
        this.rendererConfiguration.chartType = config.type.toLowerCase();
        this.refresh();
    },

    updateMarkerSize: function (caller, val) {
        this.rendererConfiguration.markerSize = val;
        this.refresh();
    },

    refresh: function () {
        this.chartContainer.removeAll();
        var xTitle = this.rendererConfiguration.xField,
            yTitle = this.rendererConfiguration.yField,
            xFound = false, yFound = false;

        for (var i in this.niceColumnNames) {
            var c = this.niceColumnNames[i];
            if (!xFound) {
                if (c.column == this.rendererConfiguration.xField) {
                    xFound = true;
                    xTitle = c.niceName;
                }
            }
            if (!yFound) {
                if (c.column == this.rendererConfiguration.yField) {
                    yFound = true;
                    yTitle = c.niceName;
                }
            }
            if (yFound && xFound) break;
        }

        var chart = Ext.create('Ext.chart.Chart', {
            height: 400,
            width: 600,
            animate: true,
            itemId: 'chart',
            store: this.store,
            axes: [{
                type: 'Numeric',
                position: 'left',
                id: 'yAxis',
                minimum: Number(this.rendererConfiguration.yRange[0]),
                maximum: Number(this.rendererConfiguration.yRange[1]),
                majorTickSteps: 11,
                fields: [this.rendererConfiguration.yField],
                grid: true,
                title: yTitle
            }, {
                type: this.rendererConfiguration.xAxisType,
                position: 'bottom',
                id: 'xAxis',
                minimum: Number(this.rendererConfiguration.xRange[0]),
                maximum: Number(this.rendererConfiguration.xRange[1]),
                majorTickSteps: 11,
                fields: [this.rendererConfiguration.xField],
                grid: true,
                title: xTitle
            }],
            series: [{
                type: this.rendererConfiguration.chartType,
                markerConfig: {
                    type: this.rendererConfiguration.markerType,
                    radius: this.rendererConfiguration.markerSize,
                    size: this.rendererConfiguration.markerSize
                },
                axis: 'bottom',
                xField: this.rendererConfiguration.xField,
                yField: this.rendererConfiguration.yField
            }]
        });
        this.chartContainer.add(chart);
    }
});