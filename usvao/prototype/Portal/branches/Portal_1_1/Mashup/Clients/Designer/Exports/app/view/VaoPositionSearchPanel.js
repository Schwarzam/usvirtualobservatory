/*
 * File: app/view/VaoPositionSearchPanel.js
 * Date: Sun Nov 27 2011 14:55:42 GMT-0500 (EST)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpd.view.VaoPositionSearchPanel', {
    extend: 'Mvpd.view.ui.VaoPositionSearchPanel',
    require: ['Mvp.util.Util'],
    statics: {
        radiusUnitsStore:
            Ext.create('Ext.data.Store', {
                storeId: 'RadiusUnits',
                fields: ['displayField', 'valueField'],
                data: [
                    { displayField: 'Deg', valueField: 'deg' },
                    { displayField: 'Arcmin', valueField: 'arcmin' },
                    { displayField: 'Arcsec', valueField: 'arcsec' }
                ]
            })
    },

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
        
        // Get direct references to important components.
        this.searchBox = this.query('#searchBox')[0];
        this.radiusBox = this.query('#radiusBox')[0];
        this.unitsBox = this.query('#unitsBox')[0];
        this.searchButton = this.query('#searchButton')[0];
        
        this.searchButton.on('click', this.startSearch, this);
        this.searchBox.on('specialkey', function(f, e){
            if(e.getKey() == e.ENTER){
                this.startSearch();
            }
        }, this);
        this.searchBox.onTriggerClick = function() {
            this.reset();
        };
        this.searchBox.validator = function (val) {
            var ret = true;
            if (val.match(/[rR]=/)) {
                ret = '"r=" method for specifying radius not supported.<br>Use the separate Radius input box instead.';
            }
            return ret;
        };
        
        this.unitsBox.onChange = function() {
            me.radiusBox.validate();
        };

        this.radiusBox.validator = function (val) {
            if (Ext.Number.from(val, -1) < 0) {
                return 'Value must be a non-negative number.';
            } else {
                var limit = 2;
                var limitUnit = ' degrees.';
                units = me.unitsBox.getValue();
                if(units == "arcmin"){
                    val = val/60;
                }else if(units == "arcsec"){
                    val = val/3600;
                }
                if( val > 2 ){
                    return 'Value must not be greater than 2 degrees';
                }
                return true;
            }
        };

    },
    
    setValue: function(val) {
        this.searchBox.setValue(val);
    },
    
    getValue: function() {
        return this.searchBox.getValue();
    },
    
    setEmptyText: function(t) {
        this.searchBox.emptyText = t;
    },
    
    getEmptyText: function() {
        return this.searchBox.emptyText;
    },
    
    reset: function() {
        this.setValue('');
    },
    
    startSearch: function() {
        var value = this.searchBox.getValue();
        if (value.length > 0) {
            var radiusValue = Ext.Number.from(this.radiusBox.getValue(), -1);
            if (radiusValue >= 0) {
                var units = this.unitsBox.getValue();
                var unitsAbbr = 'd';
                if (units == 'arcmin') {
                    unitsAbbr = 'm';
                } else if (units == 'arcsec') {
                    unitsAbbr = 's';
                }
                value = value + ' r=' + radiusValue + unitsAbbr;
                this.fireEvent('searchInitiated', value);
            }
        }
    },
    
    setHint: function(hint){
        this.setEmptyText(hint);
    },

    getHint: function(){
        return this.getEmptyText();
    }
});