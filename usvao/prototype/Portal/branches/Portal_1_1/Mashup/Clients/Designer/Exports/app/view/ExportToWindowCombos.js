/*
 * File: app/view/ExportToWindow.js
 * Date: Fri Aug 19 2011 09:22:34 GMT-0400 (EDT)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */
Ext.require('Mvp.util.SampManager');
Ext.define('Mvpd.view.ExportToWindowCombos', {
    extend: 'Mvpd.view.ui.ExportToWindowCombos',

    statics: {

        optionMap: {
            csv: { valueField: 'csv', displayField: 'Comma Separated Values (.csv)', extension: 'csv' },
            votable: { valueField: 'votable', displayField: 'VO Table (.xml)', extension: 'xml' },
            xls: { valueField: 'xls', displayField: 'Excel Spreadsheet (.xls)', extension: 'xls' },
            html: { valueField: 'html', displayField: 'HTML file (.html)', extension: 'html' },
            xml: { valueField: 'xml', displayField: 'Generic XML (.xml)', extension: 'xml' }
        },

        actionStore:
            Ext.create('Ext.data.Store', {
                storeId: 'ActionStore',
                fields: ['displayField', 'valueField'],
                data: [
                    { displayField: 'Download File', valueField: 'file' },
                    { displayField: 'Open With Browser', valueField: 'browser' }
                ]
            }),

        whichColumnsStore:
            Ext.create('Ext.data.Store', {
                storeId: 'WhichColumnsStore',
                fields: ['displayField', 'valueField'],
                data: [
                    { displayField: 'Displayed Only', valueField: 'displayed' },
                    { displayField: 'All', valueField: 'all' }
                ]
            })
    },

    initComponent: function () {

        // Add filetype options.
        var opt = Mvpd.view.ExportToWindowCombos.optionMap;
        var formatStore = Ext.create('Ext.data.Store', {
            storeId: 'FormatStore',
            fields: ['displayField', 'valueField'],
            data: [
                    opt['csv'],
                    opt['votable'],
                    opt['xls'],
                    opt['html'],
                    opt['xml']
                ]
        });

        this.callParent(arguments);

        // Get direct references to important components.
        this.exportButton = this.query('#exportButton')[0];
        this.cancelButton = this.query('#cancelButton')[0];
        this.filenameField = this.query('#filenameField')[0];
        this.formatPulldown = this.query('#FormatPulldown')[0];
        this.actionPulldown = this.query('#ActionPulldown')[0];
        this.whichPulldown = this.query('#WhichPulldown')[0];
        this.sampBroadcastButton = this.query('#sampBroadcastButton')[0];
        this.sampCancelButton = this.query('#sampCancelButton')[0];

        // Built-in defaults.
        this.actionPulldown.setValue('file');
        this.whichPulldown.setValue('displayed');

        this.sampManager = Mvp.util.SampManager;
        // Set up user-supplied handler.
        if (this.exportHandler) {
            this.exportButton.on('click', this.exportHandler, this);
        }
        this.sampBroadcastButton.on('click', this.sampBroadcast, this);

        // Set up internal cancel handler.
        this.cancelButton.on('click', this.closeWindow, this);
        this.sampCancelButton.on('click', this.closeWindow, this);

        this.formatPulldown.on('change', this.filetypeChanged, this);

    },

    closeWindow: function () {
        this.hide();
        this.destroy();
    },

    setFilename: function (value) {
        this.filenameField.setValue(value);
    },

    getFilename: function () {
        var filename = this.filenameField.getValue();

        return filename;
    },

    setFiletype: function (filetype) {
        this.formatPulldown.setValue(filetype);
    },

    getFiletype: function () {
        var filetype = this.formatPulldown.getValue();

        return filetype;
    },

    getAction: function () {
        var action = this.actionPulldown.getValue();
        return action;
    },

    getAttachment: function () {
        var action = this.getAction();
        var attachment = (action === 'file');

        return attachment;
    },

    getFiltercolumns: function () {
        var exportColumns = this.whichPulldown.getValue();
        var filtercolumns = false;
        if (exportColumns === 'displayed') {
            filtercolumns = true;
        }
        return filtercolumns;
    },

    setFileExtension: function (extension) {
        var currentVal = this.getFilename();
        var newVal = currentVal.replace(/\.[^\.]*$/, '.' + extension);
        this.setFilename(newVal);
    },

    filetypeChanged: function (formField, newValue, oldValue, eOpts) {
        var newFiletype = this.formatPulldown.getValue();
        var extension = Mvpd.view.ExportToWindowCombos.optionMap[newFiletype].extension;
        Ext.log('Setting export file extension to ' + extension);
        this.setFileExtension(extension);
    },
    sampBroadcast: function () {
        // Get the data that needs to be uploaded to the server for export.
        var filtercolumns = this.getFiltercolumns();
        var table = this.grid.getExportTable(filtercolumns);
        
        // Replace title characters that could be problematic in a filename, then remove duplicate underscores.
        var strippedTitle = this.filenameField.getValue().replace(/[^A-Za-z0-9\._\-]/g, '_');
        strippedTitle = strippedTitle.replace(/__+/, '_');
        this.sampManager.sendTable({ filename: strippedTitle, data: table });
    }


});