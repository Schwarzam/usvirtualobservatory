/*
 * File: app/view/DownloadWindowContainer.js
 * Date: Thu May 17 2012 15:25:25 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpd.view.DownloadWindowContainer', {
    requires: ['Mvp.util.MashupQuery', 'Ext.util.DelayedTask', 'Ext.form.field.ComboBox', 'Ext.form.FieldSet', 'Ext.panel.Panel', 'Ext.form.field.Text', 'Ext.window.Window', 'Ext.data.Store', 'Ext.data.JsonReader'],
    extend: 'Mvpd.view.ui.DownloadWindowContainer',

    statics: {
        optionMap: {
            zip: { valueField: 'zip', displayField: 'Zip', extension: 'zip' },
            tar: { valueField: 'tar', displayField: 'TAR', extension: 'tar' }
        }
    },
    
    initComponent: function () {

        // Add filetype options.
        var opt = Mvpd.view.DownloadWindowContainer.optionMap;
        this.formatStore = Ext.create('Ext.data.Store', {
            storeId: 'FormatStore',
            fields: ['displayField', 'valueField'],
            data: [
                    opt['zip'],
                    opt['tar']
                ]
        })

        this.callParent(arguments);
        // Get direct references to important components.
        this.formPanel = this.getComponent('downloadPanel').getComponent('fileFieldset').getComponent('formPanel');
        this.downloadButton = this.formPanel.getComponent('buttonContainer').getComponent('downloadButton');
        this.cancelButton = this.formPanel.getComponent('buttonContainer').getComponent('cancelButton');
        this.helpButton = this.formPanel.getComponent('buttonContainer').getComponent('helpButton');
        this.filenameField = this.query('#filenameField')[0];
        this.formatPulldown = this.query('#FormatPulldown')[0];
        this.removeFilesCheckbox = this.formPanel.getComponent('removeFilesCheckbox');

        this.downloadButton.on('click', this.downloadHandler, this);
        this.cancelButton.on('click', this.closeWindow, this);
        this.helpButton.on('click', this.openHelp, this);
        this.formatPulldown.on('change', this.filetypeChanged, this);
    },

    closeWindow: function () {
        this.hide();
        this.destroy();
    },

    setFilename: function (value) {
        this.filenameField.setValue(value);
    },

    getFilename: function () {
        var filename = this.filenameField.getValue();
        return filename;
    },

    setFiletype: function (filetype) {
        this.formatPulldown.setValue(filetype);
    },

    getFiletype: function () {
        var filetype = this.formatPulldown.getValue();
        return filetype;
    },

    setFileExtension: function (extension) {
        var currentVal = this.getFilename();
        var newVal = currentVal.replace(/\.[^\.]*$/, '.' + extension);
        this.setFilename(newVal);
    },

    filetypeChanged: function (formField, newValue, oldValue, eOpts) {
        var newFiletype = this.formatPulldown.getValue();
        var extension = Mvpd.view.DownloadWindowContainer.optionMap[newFiletype].extension;
        Ext.log('Setting export file extension to ' + extension);
        this.setFileExtension(extension);
    },

    downloadHandler: function () {
        var store = this.controller.store;
        var records = store.getSelectedRecords();
        var len = records.length;
        if (!len) {
            Ext.Msg.alert({ msg: 'You must select at least one record to download...', title: 'Error' });
            var task = new Ext.util.DelayedTask(function () { Ext.Msg.close() });
            task.delay(2000);
            return;
        }
        this.downloadButton.disable();
        this.removeFilesCheckbox.disable();
        this.downloadButton.setText('Building download bundle...');
        var fileList = records[0].get('dataURI');
        for (var i = 1; i < len; i++) {
            if (records[i].get('dataURI')) fileList += ', ' + records[i].get('dataURI');
        }

        var request = {
            service: 'Mast.Distribution.Request',
            params: {
                filelist: fileList,
                filename: this.getFilename().replace('.' + this.getFiletype(), '')
            }
        };
        this.query = Ext.create('Mvp.util.MashupQuery', {
            request: request,
            ajaxParams: { method: 'POST' },
            onResponse: this.onResponse,
            onError: this.onError,
            onFailure: this.onFailure,
            scope: this
        });
        this.query.run(true);
    },

    onResponse: function (responseObject, requestOptions, queryScope, complete, updated) {
        Ext.log('DownloadWindowContainer.onResponse: complete = ' + complete + ", updated = " + updated);
        if (complete) {
            // Get the URL and start the download.
            this.complete = complete;
            var data = responseObject.data,
                store = this.controller.store;
            if (data) {
                if (data.url) {
                    Ext.log('Opening as an attachment: ' + data.url);
                    Ext.log("download() url: " + url);
                    Ext.core.DomHelper.append(document.body, {
                        tag: 'iframe',
                        frameBorder: 0,
                        width: 0,
                        height: 0,
                        css: 'display:none;visibility:hidden;height:1px;',
                        src: data.url
                    });
                }
                var sl = data.statusList,
                    recoverable = 0,
                    recoverableList = '',
                    unrecoverable = 0,
                    unrecoverableList = '',
                    complete = 0,
                    completeList = '',
                    record,
                    recordsToRemove = [];

                for (var i in sl) { // build lists of (un)recoverable
                    record = store.findRecord('dataURI', i);
                    if ((sl[i] == 'ERROR') || (sl[i] == 'SIZE_EXCEEDED')) {
                        recoverable++;
                        recoverableList += i + '<br />';
                    } else if (sl[i] == 'INVALID_REPO') {
                        unrecoverable++;
                        unrecoverableList += i + '<br />';
                        recordsToRemove.push(record);
                    } else if (sl[i] == 'COMPLETE') {
                        complete++;
                        completeList += i + '<br />';
                        recordsToRemove.push(record);
                    }
                }
                if (this.removeFilesCheckbox.getValue()) {
                    this.fireEvent('downloadcomplete', { records: recordsToRemove, url: data.url });
                }
                var incompleteFiles = unrecoverable + recoverable,
                    fileList = (recoverable ? '<h3>Recoverable Files</h3><p />' + recoverableList: '') + (unrecoverable ? '<p /><h3>Unrecoverable Files</h3><p />' + unrecoverableList : '');
                if (incompleteFiles) {
                    /*
                    Ext.MessageBox.confirm('Incomplete download', incompleteFiles.toString() + ' files could not be added to your download bundle. Would you like to view which files could not be added?', function (button) {
                        if (button == 'yes') {
                            var win = Ext.create('Ext.window.Window', {
                                title: 'Undownloaded Files',
                                width: 800, height: 600,
                                layout: 'fit',
                                items: [{
                                    xtype: 'panel',
                                    autoScroll: true,
                                    html: fileList
                                }]
                            });
                            win.show();
                        }
                    }, this);
                    */
                    Ext.MessageBox.alert('Incomplete download', incompleteFiles.toString() + ' files could not be added to your download bundle. Please try again.');
                }
            }
            this.downloadButton.enable();
            this.removeFilesCheckbox.enable();
            this.downloadButton.setText('Download');
            this.close();
        }
        else {
            var p = (responseObject.data && responseObject.data.progress) ? Math.floor(responseObject.data.progress * 100) : 0;
            this.downloadButton.setText(p + '% of files bundled...');
        }
    },

    onError: function (responseObject, requestOptions, queryScope, complete) {
        Ext.log('DownloadWindowContainer.onError() called');
    },

    onFailure: function (responseObject, requestOptions, queryScope) {
        Ext.log('DownloadWindowContainer.onFailure() called');
    },

    openHelp: function () {
        var htmlText = 'The server must first retrieve the selected files in order to bundle them into a single archive, which it will then forward to you. At present, there is no way to tell the filesizes, so the progress indicator can only show a percentage of files that have been completed, rather than the percentage of total file size completed. There is also a limit of 3 GB for the archive, and the software will alert you as to which files could not be included in your archive upon reaching this limit.';
        var win = Ext.create('Ext.window.Window', {
            width: 300, height: 350,
            minWidth: 220, minHeight: 200,
            autoScroll: true, x: 140, y: 175,
            modal: true, constrainHeader: true,
            title: 'Download Basket Help',
            layout: 'fit',
            padding: 3,
            items: [{
                xtype: 'panel',
                autoScroll: true,
                items: [{
                    xtype: 'container',
                    html: htmlText,
                    padding: 7
                }]
            }]
        });
        win.show();
    }
});