/*
 * File: app/view/TopBarContainer.js
 * Date: Thu Jan 12 2012 05:26:11 GMT-0500 (Eastern Standard Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.require('Mvp.util.Util');
Ext.require('Mvp.util.Searches');
Ext.require('Mvp.util.SearchBox');
Ext.require('Mvpd.view.VaoPositionSearchPanel');
Ext.require('Mvp.util.Uploader');
Ext.require('Mvp.util.NameResolverModel');
Ext.require('Mvp.util.MashupQuery');

Ext.define('Mvpc.view.TopBarContainer', {
    extend: 'Mvpc.view.ui.TopBarContainer',

    statics: {

        tourHelpURL: (isMast) ? './MastHelp.html' : 'http://wiki.usvao.org/twiki/pub/Docs/DataDiscoveryToolUserGuide/DataDiscoveryTool_UG.html',
        choicesHelpURL: 'http://wiki.usvao.org/twiki/pub/Docs/DataDiscoveryToolTour/Data_Discovery_Tool_Tour.html#dropdownmenu',
        moreExamplesHelpURL: (isMast) ? './MastHelp.html#Search' : 'http://wiki.usvao.org/twiki/pub/Docs/DataDiscoveryToolUserGuide/DataDiscoveryTool_UG.html#Search',
        homePage: isMast ? 'http://archive.stsci.edu/' : 'http://www.usvao.org/',
        logoImageLocation: isMast ? 'data/images/MAST_logo.png' : 'data/images/ElPortal.jpg', //'data/images/VAO_logo_100.png',
        logoWidth: isMast ? 173 : 130, //100,
        logoHeight: isMast ? 71 : 70, //50,

        // SearchBox panel and component dimensions
        sbPanelWidth: 750,
        actionChooserWidth: isMast ? 325 : 380,
        exampleWidth: 350,

        showAboutWindow: function () {
            var title = 'VAO Data Discovery Tool';
            if (isMast) {
                title = 'MAST Portal';
            }
            var versionString = DemoApp.Version.versionString();
            html = '<div style="text-align: center; margin: 0px;">' +
		            '<h3 style="color: black;font-size: 20px;">' + title +
		            '</h3>Version ' + versionString + '</div>';
            if (isMast) html += '<p /><br />This tool is currently in development. It is generally stable, but all components are to be considered as works in progress. Please contact the <a href="mailto:archive@stsci.edu?subject=Portal Feedback">MAST Portal Team</a> with any feedback, comments or suggestions.';

            var aboutWindow = Ext.create('Ext.window.Window', {
                layout: 'fit',
                width: 300,
                height: (isMast) ? 250 : 150,
                modal: true,
                constrainHeader: true,
                items: Ext.create('Ext.container.Container', {
                    html: html,
                    margin: '10 10 10 10'
                })
            });
            aboutWindow.show();
        }
    },

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.scope = config.scope;
        this.callParent(arguments);
        this.logoContainer = this.getComponent('logoContainer');
        this.actionPanel = this.getComponent('actionPanel');
        this.searchPanel = this.getComponent('searchPanel');

        var tbcStatics = Mvpc.view.TopBarContainer;

        var searchBoxWidth = tbcStatics.sbPanelWidth - tbcStatics.actionChooserWidth;

        var logo = Ext.create('Ext.Component', {
            html: Mvp.util.Util.createImageLink(tbcStatics.homePage, tbcStatics.logoImageLocation, "Home",
								  tbcStatics.logoWidth, tbcStatics.logoHeight)
        });
        this.logoContainer.setSize(tbcStatics.logoWidth, tbcStatics.logoHeight);
        this.logoContainer.add(logo);

        //var serviceData = Mvp.util.Searches.defineServiceList();
        var serviceData = config.serviceList;

        this.services = Ext.create('Ext.data.Store', {
            fields: ['fn', 'hint', 'text', 'resolve', 'searchAll'],
            data: serviceData
        });

        if (isMast) {
            this.searchBox = Ext.create('Mvp.util.SearchBox', {
                width: searchBoxWidth,
                height: 25
            });
        } else {
            this.searchBox = Ext.create('Mvpd.view.VaoPositionSearchPanel', {});
        }
        this.searchBox.on('searchInitiated', this.doSearch, this);
        // Register this search box with the static part of the class so that it's easy to inject the search text
        // from the in-line help.
        DemoApp.Portal.searchBox = this.searchBox;
        this.searchPanel.add(this.searchBox);

        this.actionChooser = Ext.create('Ext.form.ComboBox', {
            //id: 'tomdbg',
            store: this.services,
            queryMode: 'local',
            forceSelection: true,
            editable: false,
            displayField: 'text',
            width: tbcStatics.actionChooserWidth,
            height: 25,
            valueField: 'fn'
        });

        if (isMast) {
            this.actionPanel.add(Ext.create('Ext.form.field.Display'), {
                width: tbcStatics.actionChooserWidth,
                style: { 'text-align': 'left' },
                border: 0,
                html: '<font size="+1">Select Collection:</font>'
            });
            this.searchPanel.add(Ext.create('Ext.form.field.Display'), {    // line up the search box
                style: { 'text-align': 'left' },
                border: 0,
                html: '<font size="+1">&nbsp</font>'
            });

            this.actionPanel.add(this.actionChooser);
        } else {
            this.actionPanel.add(Ext.create('Ext.toolbar.TextItem', {
                width: tbcStatics.actionChooserWidth,
                margin: '10 0 0 0',
                text: 'Search all catalog and image collections known to the VO:',
                style: { 'font-size': '128%' }
            }));
            this.searchPanel.add(Ext.create('Ext.toolbar.TextItem', {   // line up the search box
                text: '&nbsp;',
                style: { 'font-size': '128%' }
            }));
        }

        this.searchPanel.add(this.searchBox);

        // Add the placeholder for the resolver summary text.
        this.resolverSummaryPanel = new Ext.form.field.Display({
            fieldLabel: 'Object:',
            hidden: true,
            hideMode: 'visibility',
            labelAlign: 'right',
            labelSeparator: '&nbsp;',
            labelStyle: 'font-weight:bold;font-style:italic',
            labelWidth: tbcStatics.actionChooserWidth,
            width: tbcStatics.sbPanelWidth,
            value: ''
        });
        this.scope.resolverSummaryPanel = this.resolverSummaryPanel;
        //this.sbPanel.add(this.resolverSummaryPanel);

        var html = Mvp.util.Util.createLink(tbcStatics.tourHelpURL, 'User Guide') + ' | ' +
                '<a href="javascript: void(0)" onclick="Mvpc.view.TopBarContainer.showAboutWindow()">';
        html += (isMast) ? 'Demo Portal v' + DemoApp.Version.versionString() + '...</a>' : 'About Discovery Tool...</a>';
        if (isMast) html += ' | <a href="javascript: void(0)" onclick="Mvp.util.Uploader.showDialog(DemoApp.Portal.portalScope)">Upload File...</a>';
        this.infoBar = Ext.create('Ext.form.field.Display', {

            width: tbcStatics.actionChooserWidth,
            style: { 'text-align': ((isMast) ? 'left' : 'center') },
            border: 0,
            //html: '<a target="_blank" href="' + DemoApp.Portal.choicesHelpURL + '">About Search Options</a>' + ' | ' +
            //html: Mvp.util.Util.createLink(DemoApp.Portal.choicesHelpURL, 'Search Options') + ' | ' +
            html: html
        });
        this.actionPanel.add(this.infoBar);

        this.exampleDisplay = Ext.create('Ext.form.field.Display', {
            margin: '0 0 0 2',  // there is a tiny margin around the text input I can't get rid of
            width: tbcStatics.exampleWidth + 100,
            html: 'Examples: ' +
		            '<a href="javascript: void(0)" onclick="DemoApp.Portal.injectSearchText(this)">M101</a>, ' +
		            '<a href="javascript: void(0)" onclick="DemoApp.Portal.injectSearchText(this)">14 03 12.6 +54 20 56.7' +
                    (isMast ? ' r=0.2d</a>, ' : '</a>, ') + Mvp.util.Util.createLink(tbcStatics.moreExamplesHelpURL, 'more...')
        });
        this.searchPanel.add(this.exampleDisplay);

        this.searchAllButton = Ext.create('Ext.button.Button', {
            width: 75,
            text: 'Search All',
            hidden: true
        });
        this.searchAllButton.addListener('click', this.searchAll, this);
        this.searchPanel.add(this.searchAllButton);

        this.actionChooser.on('change', this.actionChanged, this);
        if (isMast) {   // fire this last, this will resolve whether the search box or search all button is displayed
            this.actionChooser.setValue('searchCaomVoTable');
        } else {
            this.actionChooser.setValue('searchDataScope');
        }
    },

    searchAll: function () {
        var fn = this.scope[this.actionChooser.getValue()];
        if (fn) Ext.callback(fn, this.scope);
    },

    doSearch: function (textValues, actionOverride, extraArgs) {
        var me = this;
        var textOnly = null;
        var textWithRadius = null;
        if (Ext.isArray(textValues)) {
            textWithRadius = textValues[0];
            textOnly = textValues[1];
        } else {
            textOnly = textWithRadius = textValues;
        }

        var action = 'searchDataScope';
        if (!fullSearchOnly) {
            action = me.actionChooser.getValue();
        }
        Ext.log('Search invoked for: ' + textWithRadius);

        if (Ext.isString(actionOverride)) {
            action = actionOverride;
        }

        var idx = me.services.findExact('fn', action);
        var record = idx !== -1 ? me.services.getAt(idx) : false;

        var dispatchFunction = me.scope[action];
        if (record && record.get('resolve')) {
            this.scope.resolveName(textWithRadius, dispatchFunction, extraArgs);
        } else {
            // Just dispatch on the search text.
            Ext.callback(dispatchFunction, me.scope, [textOnly]);
        }
    },

    actionChanged: function (field, newValue, oldValue, options) {
        var me = this;
        var action = me.actionChooser.getValue();
        var idx = me.services.findExact('fn', action);
        var record = idx !== -1 ? me.services.getAt(idx) : false;

        if (record) {
            var searchAll = record.get('searchAll');
            var hint = record.get('hint');
            var resolve = record.get('resolve');

            var currentSearchText = me.searchBox.getValue();
            var currentHint = me.searchBox.getHint();
            var hintChanged = (currentHint !== hint);

            if (searchAll) {
                this.searchBox.hide();
                this.exampleDisplay.hide();
                this.searchAllButton.show();
            }
            else {
                this.searchBox.show();
                this.exampleDisplay.show();
                this.searchAllButton.hide();
            }

            // Set the new empty text value.
            me.searchBox.setHint(hint);

            // If the search box was empty, or if there's a new hint, force it to display the new hint.
            if ((currentSearchText === '') || hintChanged) {
                me.searchBox.reset();

                // Hide the resolver summary if new action does not use it
                if (me.resolverSummaryPanel) {
                    if (resolve) {
                        me.resolverSummaryPanel.show();
                    } else {
                        me.resolverSummaryPanel.hide();
                        me.resolverSummaryPanel.setValue('');
                    }
                }
            }
        }
    }
});