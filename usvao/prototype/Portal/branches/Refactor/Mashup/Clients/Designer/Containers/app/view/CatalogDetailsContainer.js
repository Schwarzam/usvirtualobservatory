/*
 * File: app/view/CatalogDetailsContainer.js
 * Date: Tue Sep 20 2011 12:05:21 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.require('Mvpc.view.GenericDetailsContainer');
Ext.require('Mvp.util.SearchBox');
Ext.require('Mvp.util.Exporter');

Ext.define('Mvpc.view.CatalogDetailsContainer', {
    extend: 'Mvpc.view.ui.CatalogDetailsContainer',

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.callParent(arguments);    //set up basic Container class variables

        this.searchText = config.searchText;
        var toolbar = this.getComponent('summaryPanel').getComponent('detailsToolbar');
        var loadButton = toolbar.getComponent('loadButton'),
            downloadButton = toolbar.getComponent('downloadButton'),
            searchField = Ext.create('Mvp.util.SearchBox', {
                itemId: 'searchField',
                fieldLabel: 'Refine Search',
                emptyText: 'Enter object name or RA and Dec'
            });
        toolbar.add([{ xtype: 'tbseparator' }, searchField]);
        var summaryPanel = this.getComponent('summaryPanel');

        this.record = config.record;
        this.searchAction = '';
        var dataType = 'Unknown';
        var categoryString = this.record.get('categories');
        if (categoryString) {
            if (categoryString.match('Images')) {
                dataType = 'Images';
                this.searchAction = 'SIAP';
            } else if (categoryString.match('Catalog')) {
                dataType = 'Catalog';
                this.searchAction = 'Cone';
            }
        }

        loadButton.setHandler(this.loadRecords, this);
        downloadButton.setHandler(this.downloadRecords, this);
        searchField.on('searchInitiated', this.doSearch, this);
        var resourceInfoItems = [
            {
                xtype: 'label',
                html: this.record.get('description')
            }, {
                fieldLabel: 'Publisher',
                value: this.record.get('publisher')
            }, {
                fieldLabel: 'Website',
                value: Mvp.util.Util.createLink(this.record.get('referenceURL'))
            }, {
                fieldLabel: 'Record Count',
                value: this.record.get('hits')
            }, {
                value: '&nbsp;'
            }, {
                value: '&nbsp;'
            }
            ]

        var resourceInfo = {    //set up header portion of this.record
            xtype: 'fieldset',
            title: 'Resource Information',
            defaultType: 'displayfield',
            items: resourceInfoItems,
            width: 350
        };
        summaryPanel.getComponent('summaryContainer').add(resourceInfo);
        // dump contents into lower panel
        var detailsPanel = this.getComponent('detailsPanel');
        var c = Ext.create('Mvpc.view.GenericDetailsContainer', {
            controller: this.controller = config.controller,
            record: this.record,
            fieldOverrides: { accessURL: { autolink: false} }
        });
        detailsPanel.add(c);
    },

    loadRecords: function () {
        var accessURL = this.record.get('tableURL');
        var description = this.record.get('title'),
            inputText = this.controller.searchInput.inputText,
            shortTitle = inputText + ': ' + this.record.get('shortName');
        var capability = this.record.get('capabilityClass');
        var identifier = this.record.get('identifier');
        if (identifier.match('^ivo://mast.stsci/stpr')) {
            var sp = Mvp.search.SearchParams.getSearch('STPRDrilldown');
            var searchInput = {
                inputText: accessURL,
                title: shortTitle,
                description: description
            }
            this.controller.invokeSearch(searchInput, sp);
            Mvp.gui.DetailsWindow.closeDetailsWindow();
        }
        else if (accessURL) {
            var sp;
            if (capability && capability == 'SimpleImageAccess') {
                sp = Mvp.search.SearchParams.getSearch('Siap');
            } else {
                sp = Mvp.search.SearchParams.getSearch('VOTable');
                sp.result.type = 'genericTable';
            }
            sp.location = this.controller.location;  // Pass along the sky location for the new context.  (allows astroview to move there on tab selection)
            var searchInput = {
                inputText: accessURL,
                title: shortTitle,
                description: description
            };
            this.controller.invokeSearch(searchInput, sp);
            Mvp.gui.DetailsWindow.closeDetailsWindow();
        } else {
            alert("Data table unavailable for " + title);
        }
    },

    downloadRecords: function () {
        var url = this.record.get('tableURL');
        Mvp.util.Exporter.downloadUrl(url);
    },

    doSearch: function () {
        var url = this.record.get('accessURL'),
            searchText = this.query('#searchField')[0].value;
        var title = this.record.get('shortName') + ": " + searchText;
        var description = this.record.get('title') + ' searched at ' + searchText;

        if (url) {
            url = url.replace(/amp;/gi, '');
        }

        var args = { url: url, inputText: searchText,
            title: title, description: description
        };

        var searchParams = Mvp.search.SearchParams.getSearch(this.searchAction);
        searchParams.result.type = 'genericTable';
        Mvp.gui.DetailsWindow.closeDetailsWindow();
        this.controller.invokeSearch(args, searchParams);
    }
});
