/*
 * File: app/view/CaomDetailsContainer.js
 * Date: Thu Sep 22 2011 10:18:01 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.CaomDetailsContainer', {
    extend: 'Mvpc.view.ui.CaomDetailsContainer',
    requires: ['Mvp.util.Util', 'Mvp.custom.Caom'],
    
    statics: {
        openDetailsTab: function(collection, obsId) {
                var url = 'http://archive.stsci.edu/cgi-bin/mastpreview?mission=' + collection + '&dataid=' + (collection == 'BEFS' ? obsId.toUpperCase(): obsId);
                var searchParams = Mvp.search.SearchParams.getSearch('iFrame');
                var args = { url: url, inputText: url};
                Mvpc.view.CaomDetailsContainer.controller.invokeSearch(args, searchParams);            
        },

        voSearch: function(ra, dec) {
            var searchParams = Mvp.search.SearchParams.getSearch('DataScope');
            var args = { inputText: ra + ' ' + dec + ' r=2m' };
            Mvpc.view.CaomDetailsContainer.controller.invokeSearch(args, searchParams);
        },
        
        controller: null
    },

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.callParent(arguments);    //set up basic Container class variables
        Mvpc.view.CaomDetailsContainer.controller = config.controller;

        var record = config.record;
        var collection = record.get('obs_collection'),
            target = record.get('target_name'),
            publisher = record.get('publisher_id'),
            obsId = record.get('obs_id'),  // this is the more readable ID
            caom_obsid = record.get('obsid'),  // this is the unique ID within CAOM.
            proposal_pi = record.get('proposal_pi'),
            instrument = record.get('instrument'),
            children = record.get('children'),
            parents = record.get('parents'),
            exposureTime = record.get('t_exptime'),
            ra = record.get('s_ra'),
            dec = record.get('s_dec'),
            urls = Mvp.custom.Caom.simplePreviewGenerator(record, 256, 256);
        var url = urls[0],
            imageLink = urls[1];
        var hyperlink = Mvp.util.Util.createLinkIf(url, 'Interactive Display'),
            targetHTML = '<center><h1>' + target + '</h1></center>',
            summaryPanel = this.getComponent('summaryPanel'),
            detailsPanel = this.getComponent('detailsPanel'),
            hyperlink2 = null, url2;
        if (collection == 'HLA') {
            url2 = 'http://hla.stsci.edu//cgi-bin/moreinfo.cgi?html=1&dataset=' + obsId + '&filename=' + obsId + '&detector=' + instrument + '&target=' + target;
            hyperlink2 = Mvp.util.Util.createLinkIf(url2, 'More...')
        } else {
            var onclick = "Mvpc.view.CaomDetailsContainer.openDetailsTab('" + collection + "', '" + obsId + "');"
            hyperlink = Mvp.util.Util.createLink('javascript: void(0)', 'Details...', onclick);
        }
        var titleContainer = summaryPanel.getComponent('titleContainer'),
            imageContainer = summaryPanel.getComponent('imageContainer'),
            summaryContainer = summaryPanel.getComponent('summaryContainer');
        var targetLabel = {
            xtype: 'label',
            itemId: 'targetLabel',
            html: targetHTML
        },
            imageLabel = {
                xtype: 'label',
                itemId: 'imageLabel',
                html: '<center><a target="_blank" title="' + url + '" href="' + url + '">' + imageLink + '</a></center>',
                width: (imageLink.match(/<img/)) ? null : 300
            },
            publisherLabel = {
                xtype: 'label',
                itemId: 'publisherLabel',
                text: 'Publisher: ' + publisher
            },
            collectionLabel = {
                xtype: 'label',
                itemId: 'collectionLabel',
                text: 'Collection: ' + collection
            },
            instrumentLabel = {
                xtype: 'label',
                itemId: 'instrumentLabel',
                text: 'Instrument: ' + instrument
            },
            obsIdLabel = {
                xtype: 'label',
                itemId: 'obsIdLabel',
                text: 'Obs ID: ' + obsId
            },
            piLabel = {
                xtype: 'label',
                itemId: 'piLabel',
                hidden: proposal_pi == '',
                text: 'Proposal PI: ' + proposal_pi
            },
            exposureTimeLabel = {
                xtype: 'label',
                itemId: 'exposureTimeLabel',
                hidden: exposureTime == 0,
                text: 'Exposure Time: ' + exposureTime + ' (s)'
            },
            adsSearch = Ext.create('Ext.button.Button', {
                itemId: 'adsButton',
                text: 'Search for Publications',
                tooltip: 'Search for Publications authored by this proposal PI&nbsp;',
                scope: this.portal,
                shadow: true,
                hidden: proposal_pi == '',
                style: 'border: 1px solid #000000;' // The 'border' config has no effect, overriding the toolbar button style is a pain

            }),
            obsIdSearch = Ext.create('Ext.button.Button', {
                itemId: 'obsIdButton',
                text: 'Search by ObsID',
                tooltip: 'Search by ObsID',
                scope: this.portal,
                shadow: true,
                hidden: (!children && !parents),
                style: 'border: 1px solid #000000;',
                margins: '2 0 2 0'

            }),
            voSearch = Ext.create('Ext.button.Button', {
                itemId: 'voSearchButton',
                text: 'Search Virtual Observatory',
                tooltip: 'Search the VO at this position',
                scope: this.portal,
                shadow: true,
                hidden: !(ra && dec),
                style: 'border: 1px solid #000000;',
                margins: '2 0 2 0'
            }),
            urlLabel = {
                xtype: 'label',
                itemId: 'urlLabel',
                html: hyperlink
            },
            moreLabel = {
                xtype: 'label',
                itemId: 'moreLabel',
                html: hyperlink2
            };
        adsSearch.on('click', this.searchAdsAuthor, this, { author: proposal_pi });
        obsIdSearch.on('click', this.searchByObsId, this, { obsid: caom_obsid });
        voSearch.on('click', this.searchVo, this, {ra: ra, dec: dec});

        titleContainer.add(targetLabel);
        imageContainer.add(imageLabel);
        summaryContainer.add([publisherLabel, collectionLabel, instrumentLabel, obsIdLabel, exposureTimeLabel, piLabel, adsSearch, voSearch, obsIdSearch, urlLabel]);
        if (url2) summaryContainer.add(moreLabel);
        detailsPanel.add(Ext.create('Mvpc.view.GenericDetailsContainer', { record: record, controller: config.controller }));

        // Make note of all the columns that have a method for computing a
        // special display value.
        var updateObject = config.controller.getLastUpdateObject();
        var columns = updateObject.columnInfo.columns;
        this.specialDisplays = {};
        for (var c in columns) {
            var col = columns[c];
            if (col.getDisplayValue) {
                var specialField = col.dataIndex;
                if (specialField) {
                    this.specialDisplays[specialField] = { getDisplayValue: col.getDisplayValue };
                }
            }
        }
    },

    searchAdsAuthor: function (button, event, config) {
        var args = {
            inputText: config.author,
            author: config.author,
            title: config.author,
            description: 'Publications by Author: ' + config.author
        };
        var searchParams = Mvp.search.SearchParams.getSearch('ADS');
        Mvp.gui.DetailsWindow.closeDetailsWindow();
        this.controller.invokeSearch(args, searchParams);
    },

    searchByObsId: function (button, event, config) {
        var args = {
            inputText: config.obsid,
            obsid: config.obsid
        };
        var searchParams = Mvp.search.SearchParams.getSearch('CAOMBYOBS');
        Mvp.gui.DetailsWindow.closeDetailsWindow();
        this.controller.invokeSearch(args, searchParams);
    },

    searchVo: function (button, event, config) {
        Mvpc.view.CaomDetailsContainer.voSearch(this.specialDisplays['s_ra'].getDisplayValue(config.ra), this.specialDisplays['s_dec'].getDisplayValue(config.dec));
    }
});