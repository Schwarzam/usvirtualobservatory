/*
 * File: app/view/NedSedDetails.js
 * Date: Wed Dec 07 2011 12:24:38 GMT-0500 (EST)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.NedSedDetails', {
    extend: 'Mvpc.view.ui.NedSedDetails',

    initComponent: function() {
        var me = this;
        this.columns = this.grid.origAllColumns;
        me.callParent(arguments);
    },
    
    constructor: function (config) {
        this.callParent(arguments);    //set up basic Container class variables
        var record = config.record;
        this.record = record;

        var toolbar = this.getComponent('summaryPanel').getComponent('detailsToolbar');

        var loadButton = toolbar.getComponent('loadButton');
        loadButton.setHandler(this.loadRecords, this);
        
        var downloadButton = toolbar.getComponent('downloadButton');
        downloadButton.setHandler(this.downloadRecords, this);
        
        var sampBroadcast = toolbar.getComponent('sampBroadcast');
        sampBroadcast.setHandler(this.broadcastImage, this);

        var summaryContainer = this.getComponent('summaryPanel').getComponent('summaryContainer');

        var objectName = summaryContainer.getComponent('objectName');
        objectName.setValue(this.objectName());
        
        var numberOfPoints = summaryContainer.getComponent('numberOfPoints');
        numberOfPoints.setValue(record.get('NumberPhotometricPoints'));
        
    },

    loadRecords: function () {
        // Load can use a specialized mashup adapter that just takes the object name
        // or build the access url and use the generic loader vo table adapter.
        
        // The download and broadcast features need to generate the url here anyway,
        // so let's just do that?  But then we don't get column customization.  Hmm.
        var accessURL = this.accessUrl(this.record);
        
        var objectName = this.objectName();
        var title = 'SED: ' + objectName;
        this.searchScope.Ned_SedDataRetrieval_Votable(objectName, title);
    },

    downloadRecords: function () {
        var accessURL = this.accessUrl(this.record);
        var filename = this.makeFileName(this.record);
        Mvp.util.Exporter.downloadUrl(accessURL, filename);
    },
    
    broadcastImage: function() {
        var accessURL = this.accessUrl(this.record);

        Mvp.util.SampManager.sendTableByUrl(accessURL);
    },
    
    accessUrl: function(record) {
        //var prefix = 'http://vo.ned.ipac.caltech.edu';  // hard-coded prefix.  Is there a better way to get this?
        //var suffix = record.get('URL_TO_GET_NED_Photometry');
        //var encodedSuffix = encodeURIComponent(suffix);
        //var url = prefix;
        //if (encode) {
        //    url += encodedSuffix;
        //} else {
        //    url += suffix;
        //}
        
        // That doesn't work.  We have encoding issues, so we can't generate the URL as it was meant to be from the
        // URL_TO_GET_NED_Photometry column value.  Instead build it like the Mashup would for the Ned.SedDataRetrieval.Votable adaptor.
        var objectName = this.objectName();
        var encodedObject = encodeURIComponent(objectName);
        var prefix = 'http://vo.ned.ipac.caltech.edu/services/accessSED?REQUEST=getData&TARGETNAME=';
        var url = prefix + encodedObject;
        
        return url;
    },
    
    makeFileName: function(record) {
        var objectName = this.objectName();
        var fileName = Mvp.util.Util.filenameCreator(objectName, 'xml');
           
        return fileName;
   },
   
   objectName: function() {
        var objectName = this.record.get('ObjectName');
        return objectName.trim();
   }

});