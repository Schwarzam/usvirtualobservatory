/*
 * File: app/view/genericDetailsContainer.js
 * Date: Tue Sep 13 2011 09:52:31 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.GenericDetailsContainer', {
    requires: [
        'Mvp.util.Util',
        'Mvpc.view.ui.GenericDetailsContainer',
        'Mvp.custom.Generic'
    ],
    extend: 'Mvpc.view.ui.GenericDetailsContainer',

    statics: {
        controller: null
    },

    constructor: function (config) {
        // config.record - row of a VO table
        this.callParent(arguments);    // set up basic Container class variables
        Mvpc.view.GenericDetailsContainer.controller = config.controller;

        var record = config.record;
        var fields = record.fields;
        var keys = (fields) ? fields.keys : [];
        var textVals = [], hyperVals = [], displayItems = [];
        var fieldOverrides = config.fieldOverrides;
        this.viewConfig = {
            enableTextSelection: true
        };

        // Make note of all the columns that have a method for computing a
        // special display value.
        var updateObject = config.controller.getLastUpdateObject();
        var columns = updateObject.columnInfo.columns;
        this.specialDisplays = {};
        for (var c in columns) {
            var col = columns[c];
            if (col.getDisplayValue) {
                var specialField = col.dataIndex;
                if (specialField) {
                    this.specialDisplays[specialField] = { getDisplayValue: col.getDisplayValue };
                }
            }
        }

        for (var fieldName in fieldOverrides) {
            var overrides = fieldOverrides[fieldName];
            if (overrides) {
                if (!this.specialDisplays[fieldName]) {
                    this.specialDisplays[fieldName] = {};
                }
                Ext.apply(this.specialDisplays[fieldName], overrides);
            }
        }

        // Compute the display row for each field.
        for (var k in keys) {   // acquire all key-value pairs
            var fieldName = keys[k];
            var value = record.get(fieldName);
            if (this.specialDisplays[fieldName] && this.specialDisplays[fieldName].getDisplayValue) {
                var supplement = this.specialDisplays[fieldName].getDisplayValue(value);
                value += '  (' + supplement + ')';
            }

            // autolink defaults to true.  Only false if overrides specify it so.
            var autolink = !(this.specialDisplays[fieldName] && !this.specialDisplays[fieldName].autolink);
            if (autolink && Mvp.util.Util.isUrl(value)) {   // create hyperlinks if it looks like a url
                this.addItem(hyperVals, fieldName, value, this);
            } else {
                this.addItem(textVals, fieldName, value, this);
            }
        }
        var obj;
        if ((obj = updateObject.columnInfo.specialColumns) && obj.raColName && obj.decColName) {
            var i = updateObject.columnInfo.columns.length;
            var bg = Ext.create('Ext.toolbar.Toolbar', {
                    dock: 'top',
                    layout: 'auto',
                    height: 35,
                items: [
                    //button
                    {
                        xtype: 'button',
                        tooltip: 'Search VO at this RA/Dec',
                        icon: Mvp.util.Constants.SEARCH_ICON[Mvp.util.Constants.ICON_SIZE],
                        scale: Mvp.util.Constants.ICON_SIZE,
                        flex: 1,
                        handler: function () {
                            var raFn = this.specialDisplays[obj.raColName].getDisplayValue,
                            decFn = this.specialDisplays[obj.decColName].getDisplayValue;
                            Mvp.custom.FullSearch.voSearch(raFn(record.get(obj.raColName)), decFn(record.get(obj.decColName)), this.controller);
                        },
                        scope: this
                    }
                ]
            });
            this.addDocked(bg);
        }
        displayItems = hyperVals.concat(textVals);  // want to float hyperlinks to the top
        var container = Ext.create('Ext.container.Container', {
            items: displayItems
        });
        this.add(container);    //adds items directly to the Container
    },

    initComponent: function () {
        this.callParent(arguments);
    },

    addItem: function (items, fieldName, value, scope) {   //builds a layout for each field of a record
        // need to make something about this layout smarter at some point, have seen a problem when
        // a column identifier is a long string of words with a _ or another character that the OS/browser
        // knows to extend onto another line
        if (fieldName == '_selected_') return;  // not a real field
        var autolink = !(this.specialDisplays[fieldName] && !this.specialDisplays[fieldName].autolink);
        var displayVal = value;

        if (autolink && (typeof displayVal == 'string')) {
            if (value.match('<a href=') !== null) {
                displayVal = Mvp.custom.Generic.fixAnchorTags(value)
            } else {
                displayVal = Mvp.util.Util.createLinkIf(value);
            }
        }
        displayVal = displayVal !== undefined ? displayVal.toString().trim(): '';
        var text = { xtype: 'label', width: 190, html: displayVal };
        var newItem = {
            layout: {
                type: 'hbox',
                align: 'left'
            },
            items: [{
                xtype: 'label',
                text: fieldName + ': ',
                width: 190,
                margin: '1 3 1 3'
            }, text
        ]
        };
        items.push(newItem);
    }
});