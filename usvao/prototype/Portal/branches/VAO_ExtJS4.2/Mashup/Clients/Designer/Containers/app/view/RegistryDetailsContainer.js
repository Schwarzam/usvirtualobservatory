/*
 * File: app/view/RegistryDetailsContainer.js
 * Date: Tue Sep 20 2011 12:05:21 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.RegistryDetailsContainer', {
    requires: ['Mvpc.view.GenericDetailsContainer', 'Mvp.util.SearchBox', 'Mvp.custom.Registry'],
    extend: 'Mvpc.view.ui.DatascopeDetailsContainer',

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.callParent(arguments);    //set up basic Container class variables

        this.searchText = config.searchText;
        var toolbar = this.getComponent('summaryPanel').getComponent('detailsToolbar');

        toolbar.getComponent('separator1').hide();  // these components aren't used in this container
        toolbar.getComponent('loadButton').hide();

        this.record = config.record;
        this.refineSearchAction = '';
        var dataType = 'Unknown';

        var capability = this.record.get('capabilityClass');
        if (capability && capability == 'ConeSearch') {
            this.refineSearchAction = 'Cone';
            dataType = 'Catalog Service';
        } else if (capability && capability == 'SimpleImageAccess') {
            this.refineSearchAction = 'Siap';
            dataType = 'Image Service';
        } else if (capability && capability == 'SimpleSpectralAccess') {
            this.refineSearchAction = 'Ssap';
            dataType = 'Spectral Service';
        }

        if (capability) {
            searchField = Ext.create('Mvp.util.SearchBox', {
                itemId: 'searchField',
                fieldLabel: 'Search This Resource',
                labelWidth: 125,
                emptyText: 'Enter object name or RA and Dec',
                width: 360
            });
            if (this.refineSearchAction !== '') {
                toolbar.add([searchField]);
            }
            searchField.on('searchInitiated', this.doSearch, this);
        }

        var downloadButton = toolbar.getComponent('downloadButton');
        downloadButton.setHandler(this.downloadRecords, this);

        var summaryPanel = this.getComponent('summaryPanel');
        var resourceInfoItems = [
            {
                fieldLabel: 'Title',
                value: this.record.get('title'),
                margin: '0 0 0 10'
            },
            {
                fieldLabel: 'Short Name',
                value: this.record.get('shortName'),
                margin: '0 0 0 10'
            },
            {
                fieldLabel: 'Identifier',
                value: this.record.get('identifier'),
                margin: '0 0 0 10'
            }, {
                xtype: 'label',
                html: this.record.get('description'),
                margin: '0 0 0 10'
            }, {
                fieldLabel: 'Publisher',
                value: this.record.get('publisher'),
                margin: '0 0 0 10'
            }, {
                fieldLabel: 'Type',
                value: dataType,
                margin: '0 0 0 10'
            }, {
                fieldLabel: 'Website',
                value: Mvp.util.Util.createLink(this.record.get('referenceURL')),
                margin: '0 0 0 10'
            }, {
                value: '&nbsp;'
            }, {
                value: '&nbsp;'
            }
        ];

        var resourceInfo = {    //set up header portion of this.record
            xtype: 'fieldset',
            title: 'Resource Information',
            defaultType: 'displayfield',
            items: resourceInfoItems,
            width: 415,
            margin: '0 0 0 10'
        };
        summaryPanel.getComponent('summaryContainer').add(resourceInfo);
        // dump contents into lower panel
        var detailsPanel = this.getComponent('detailsPanel');
        var c = Ext.create('Mvpc.view.GenericDetailsContainer', {
            controller: this.controller = config.controller,
            record: this.record,
            fieldOverrides: { accessURL: { autolink: false} }
        });
        detailsPanel.add(c);
    },

    downloadRecords: function () {
        Mvp.custom.Registry.loadResourceXml(this.record);
    },

    doSearch: function () {
        var url = this.record.get('accessURL'),
            searchText = this.query('#searchField')[0].value;
        var title = this.record.get('shortName') + ": " + searchText;
        var description = this.record.get('title') + ' searched at ' + searchText;

        if (url) {
            url = url.replace(/amp;/gi, '');

            if (!url.match(/(\?&)$/)) {
                if (url.match(/\?/)) {
                    url = url + '&';
                } else {
                    url = url + '?';
                }
            }
        }

        var args = { url: url, inputText: searchText,
            title: title, description: description
        };

        var searchParams = Mvp.search.SearchParams.getSearch(this.refineSearchAction);
        Mvp.gui.DetailsWindow.closeDetailsWindow();
        this.controller.invokeSearch(args, searchParams);
    }
});
