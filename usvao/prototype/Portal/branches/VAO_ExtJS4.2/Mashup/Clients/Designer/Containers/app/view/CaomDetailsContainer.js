/*
 * File: app/view/CaomDetailsContainer.js
 * Date: Thu Sep 22 2011 10:18:01 GMT-0400 (Eastern Daylight Time)
 *
 * This file was generated by Ext Designer version 1.2.0.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.CaomDetailsContainer', {
    extend: 'Mvpc.view.ui.CaomDetailsContainer',
    requires: ['Mvp.util.Util',
        'Mvp.custom.Caom',
        'Mvp.app.DownloadBasket'
    ],
    
    statics: {
        openDetailsTab: function(collection, obsId) {   // opens a new internal tab (commented out) or window with the MAST classic page
                var url = 'http://archive.stsci.edu/cgi-bin/mastpreview?mission=' + collection + '&dataid=' + (collection == 'BEFS' ? obsId.toUpperCase(): obsId);
                /*
                var searchParams = Mvp.search.SearchParams.getSearch('iFrame');
                var args = { url: url, inputText: url};
                Mvpc.view.CaomDetailsContainer.controller.invokeSearch(args, searchParams);            
                */
                window.open(url, '_blank');
        },
        
        controller: null
    },

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
    },

    constructor: function (config) {
        this.callParent(arguments);    //set up basic Container class variables
        Mvpc.view.CaomDetailsContainer.controller = config.controller;
        this.parentScope = config.parentScope;  // important that this be defined because this allows the 1-click download to be accessed via Mvp.gui.custom.Caom instead of copying that code

        var record = config.record;
        var collection = record.get('obs_collection'),
            target = record.get('target_name'),
            publisher = record.get('publisher_id'),
            obsId = record.get('obs_id'),  // this is the more readable ID and is neede to open the MAST classic page
            caom_obsid = record.get('obsid'),  // this is the unique ID within CAOM.
            proposal_pi = record.get('proposal_pi'),
            instrument = record.get('instrument'),
            children = record.get('children'),
            parents = record.get('parents'),
            exposureTime = record.get('t_exptime'),
            ra = record.get('s_ra'),
            dec = record.get('s_dec'),
            urls = Mvp.custom.Caom.simplePreviewGenerator(record, 256, 256),
            title = target + ' - ' + obsId,
            urlTitle = (collection == 'HLA') ? 'View in Interactive Display' : 'View Full Size Preview';
        var url = urls[0],
            imageLink = urls[1];
        var targetHTML = '<center><h1>' + title + '</h1></center>',
            summaryPanel = this.getComponent('summaryPanel'),
            detailsPanel = this.getComponent('detailsPanel'),
            hyperlink2 = null, url2;
        
        var titleContainer = summaryPanel.getComponent('titleContainer'),
            imageContainer = summaryPanel.getComponent('imageContainer'),
            summaryContainer = summaryPanel.getComponent('summaryContainer'),
            detailsToolbar = summaryPanel.getComponent('detailsToolbar'),
            downloadButton = detailsToolbar.getComponent('downloadButton'),
            addToBasketButton = detailsToolbar.getComponent('addToBasketButton'),
            interactiveDisplayButton = detailsToolbar.getComponent('interactiveDisplayButton'),
            searchVoButton = detailsToolbar.getComponent('searchVoButton'),
            moreButton = detailsToolbar.getComponent('moreButton');
        var targetLabel = {
            xtype: 'label',
            itemId: 'targetLabel',
            html: targetHTML
        },
            imageLabel = {
                xtype: 'label',
                itemId: 'imageLabel',
                html: '<center><a target="_blank" title="' + urlTitle +
                     '" alt="' + urlTitle +
                    '" href="' + url + '">' + imageLink + '</a></center>',
                width: (imageLink.match(/<img/)) ? null : 300
            },
            publisherLabel = {
                xtype: 'label',
                itemId: 'publisherLabel',
                text: 'Publisher: ' + publisher
            },
            collectionLabel = {
                xtype: 'label',
                itemId: 'collectionLabel',
                text: 'Collection: ' + collection
            },
            instrumentLabel = {
                xtype: 'label',
                itemId: 'instrumentLabel',
                text: 'Instrument: ' + instrument
            },
            obsIdLabel = {
                xtype: 'label',
                itemId: 'obsIdLabel',
                text: 'Obs ID: ' + obsId
            },
            piLabel = {
                xtype: 'label',
                itemId: 'piLabel',
                hidden: proposal_pi == '',
                text: 'Proposal PI: ' + proposal_pi
            },
            exposureTimeLabel = {
                xtype: 'label',
                itemId: 'exposureTimeLabel',
                hidden: exposureTime == 0,
                text: 'Exposure Time: ' + exposureTime + ' (s)'
            };
        interactiveDisplayButton.on('click', this.interactiveDisplay, this, { url: urls[0] });
        if (collection != 'HLA') interactiveDisplayButton.setTooltip('View Larger Image');
        searchVoButton.on('click', this.searchVo, this, { ra: ra, dec: dec });
        moreButton.on('click', this.openDetails, this, { record: record });
        downloadButton.on('click', this.download, this, {});
        addToBasketButton.on('click', this.addToBasket, this, {});

        if (collection == 'GALEX') {    // the external view doesn't work for Galex
            moreButton.hide();
            detailsToolbar.getComponent('separator4').hide();
        }

        titleContainer.add(targetLabel);
        imageContainer.add(imageLabel);
        summaryContainer.add([publisherLabel, collectionLabel, instrumentLabel, obsIdLabel, exposureTimeLabel, piLabel]);
        detailsPanel.add(Ext.create('Mvpc.view.GenericDetailsContainer', { record: record, controller: config.controller }));

        // Make note of all the columns that have a method for computing a
        // special display value.
        var updateObject = config.controller.getLastUpdateObject();
        var columns = updateObject.columnInfo.columns;
        this.specialDisplays = {};
        for (var c in columns) {
            var col = columns[c];
            if (col.getDisplayValue) {
                var specialField = col.dataIndex;
                if (specialField) {
                    this.specialDisplays[specialField] = { getDisplayValue: col.getDisplayValue };
                }
            }
        }
    },

    searchVo: function (button, event, config) {
        Mvp.custom.FullSearch.voSearch(this.specialDisplays['s_ra'].getDisplayValue(config.ra), this.specialDisplays['s_dec'].getDisplayValue(config.dec), this.controller);
    },

    interactiveDisplay: function (button, evt, config) {
        window.open(config.url, '_blank');
    },

    openDetails: function (button, evt, config) {   // builds URL to MAST classic page or HLA download page
        var record = config.record,
            collection = record.get('obs_collection'),
            obsId = record.get('obs_id'),
            obsId2 = record.get('obsID');
        if (collection == 'HLA') {
            url = 'http://hla.stsci.edu//cgi-bin/moreinfo.cgi?html=1&dataset=' + obsId + '&filename=' + obsId + '&detector=' + record.get('instrument') + '&target=' + record.get('target_name');
            window.open(url, '_blank');
        } else {
            Mvpc.view.CaomDetailsContainer.openDetailsTab(collection, (collection == 'GALEX' ? obsId2: obsId));
        }
    },

    download: function (button, evt, config) {
        // sets up the same kind of catch and passthrough to run a 1-click download as in Mvp.gui.custom.Caom
        // it references that class's code as well via this.parentScope so it doesn't have to be rewritten
        var request = {
            service: 'Mast.Caom.Products',
            params: {
                obsid: this.record.get('obsID'),
                ajaxParams: { method: 'POST' }
            }
        };
        this.query = Ext.create('Mvp.util.MashupQuery', {
            request: request,
            ajaxParams: { method: 'POST' },
            onResponse: this.parentScope.passthrough,
            onError: this.parentScope.onError,
            onFailure: this.parentScope.onFailure,
            scope: this.parentScope
        });
        this.query.run(true);
    },

    addToBasket: function (button, evt, config) {
        Mvp.app.DownloadBasket.add('CAOM', [this.record], 'obsID');
        var args = {
            obsid: Mvp.app.DownloadBasket.downloadBasket['CAOM'],
            inputText: Mvp.app.DownloadBasket.downloadBasket['CAOM']
        };
        var searchParams = Mvp.search.SearchParams.getSearch('CAOMDownload');
        this.controller.invokeSearch(args, searchParams);
        this.fireEvent('APP.context.DownloadBasket.changed', {  // alert TopBarContainer
            type: 'APP.context.DownloadBasket.changed',
            context: this.controller
        });
    }
});