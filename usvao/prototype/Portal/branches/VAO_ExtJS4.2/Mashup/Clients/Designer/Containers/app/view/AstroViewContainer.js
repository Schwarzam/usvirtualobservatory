/*
 * File: app/view/AstroViewContainer.js
 * Date: Tue Dec 13 2011 15:29:39 GMT-0500 (Eastern Standard Time)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Mvpc.view.AstroViewContainer', {
    extend: 'Mvpc.view.ui.AstroViewContainer',
    requires: ['Mvpc.view.AstroViewOptionsContainer', 'Ext.flash.Component'],
    statics: {
        instances: {}
    },

    constructor: function (config) {
        this.callParent(arguments);

        this.astroViewInitialized = false;

        // Set up communication with context manager.
        if (config && config.app) {
            this.app = config.app;
            var em = this.app.getEventManager();
            em.addListener('APP.context.records.selected', this.onRecordsSelected, this);
            em.addListener('APP.context.records.filtered', this.onRecordsFiltered, this);
            em.addListener('APP.context.added', this.onContextAdded, this);
            em.addListener('APP.context.removed', this.onContextRemoved, this);
            em.addListener('APP.context.color.changed', this.onColorChanged, this);
            em.addListener('APP.context.position.changed', this.onPositionChanged, this);
            em.addListener('APP.context.avmode.changed', this.onAvModeChanged, this);
            this.addEvents('APP.context.records.selected');
        }

        // Create a static way for AstroView to get the context manager.
        Mvpc.view.AstroViewContainer.instances[this.id] = this;
        AstroViewContainer = this;
        this.AstroViewContainer = "Mvpc.view.AstroViewContainer.instances['" + this.id + "']";

        // Store rendertype type if passed in as argument
        this.rendertype = "canvas";
        if (arguments && arguments.length > 0 && arguments[0].rendertype) {
            this.rendertype = arguments[0].rendertype;
        }
        
        // Store survey type if passed in as argument
        this.surveytype = "DSS";
        if (arguments && arguments.length > 0 && arguments[0].surveytype) {
            this.surveytype = arguments[0].surveytype;
        }

        // Validate rendertype argument
        if (this.rendertype !== "flash" &&
            this.rendertype !== "webgl" &&
            this.rendertype !== "canvas") {
            alert("Unknown rendertype option passed to AstroViewContainer: " + this.rendertype);
        }

        if (this.rendertype == 'webgl') {   // or some more appropriate reason to create it...
            this.optionsContainer = Ext.create('Mvpc.view.AstroViewOptionsContainer', {});
            this.optionsWin = Ext.create('Ext.window.Window', {
                closeAction: 'hide',
                layout: 'fit',
                title: 'AstroView Options',
                height: 300, width: 325
            });
            this.optionsWin.add(this.optionsContainer);
            //this.optionsWin.show();

            this.optionsContainer.addListener('avGraphicsModeChanged', this.handleGraphicsChange, this);
        }
    },

    initComponent: function () {
        var me = this;
        me.callParent(arguments);
        if (this.rendertype === "flash") {
            this.createAstroViewFlash();
        }
        else {
            this.avcontainer = Ext.create("Ext.container.Container");
            this.add(this.avcontainer);
            this.on('afterLayout', this.onAfterLayout, this);
        }
    },

    onAfterLayout: function (arg) {
        if (!this.astroview) {
            this.createAstroViewJavascript();
        }
    },

    createAstroViewJavascript: function () {
        if (this.avcontainer) {
            var element = document.getElementById(this.avcontainer.id);
            if (element) {
                // Create AstroView ThreeJs Version with config bundle and set the global variable AstroView 
                // so that the Portal Application can find it.
                this.astroview = new ASTROVIEW.AstroBasicView({"div":element, 
                                                               "rendertype":this.rendertype, 
                                                               "surveytype":this.surveytype,
                                                               "avcontainer":this, 
                                                               "debug":(AppConfig && AppConfig.isDebug)});
                AstroView = this.astroview;
                this.astroViewInitialized = true;
            }
            else {
                alert("AstroViewContainer: createAstroViewJavascript(): avcontainer element is not valid.");
            }
        }
        else {
            alert("AstroViewContainer: createAstroViewJavascript(): avcontainer is not valid.");
        }
    },

    createAstroViewFlash: function () {

        // Create Flash Vars
        var flashVars = {};
        flashVars.debug = (AppConfig && AppConfig.isDebug);

        // Create Flash Params
        var flashParams = {};
        flashParams.allowfullscreen = "true";

        // Set minimum Flash Version for AstroView and use Express Install to prompt User 
        this.flashVersion = "10.2.0";

        // Create the Flash Component
        this.astroview = Ext.create('Ext.flash.Component', {
            id: 'AstroView',
            url: '../AstroView/AstroView.swf',
            flashVars: flashVars,
            flashParams: flashParams,
            flashVersion: this.flashVersion
        });

        this.add(this.astroview);
        this.activated = false;
        this.astroview.on('success', this.onFlashSuccess, this);
        this.astroview.on('failure', this.onFlashFailure, this);
        this.astroview.on('afterrender', function () { this.activated = true }, this);
    },

    onFlashSuccess: function () {
        this.swfId = this.astroview.swfId;
        var task = new Ext.util.DelayedTask(function () {
            var w = this.getWidth();
            this.setWidth(w + 10);
        }, this);
        task.delay(1);  // bug workaround for the "scrunched" flash component in Chrome
    },

    onFlashFailure: function () {
        // Inform User to install Flash
        this.remove(this.astroview);
        var panel = Ext.create("Ext.panel.Panel", {
            html: "</br><H3>The AstroView Component requires Flash version: " + this.flashVersion + "</H3>" +
        	       "</br>Please install the latest version here: <a href='http://get.adobe.com/flashplayer/' target='_blank'>http://get.adobe.com/flashplayer/</a>"
        });
        this.add(panel);
    },

    // onAstroViewEvent(): Forward embedded Flash AstroView Events on to the Application Event Manager
    onAstroViewEvent: function (msg) {

        if (msg.type === 'AstroView.Objects.Selected') {
            if (msg.objects) {
                var changedContexts = this.setObjectsSelected(msg.objects, true);
                if (changedContexts.length > 0) {
                    // Some unselected things did get selected.  Just send out events for those changed contexts.
                    this.fireSelectedEventForContexts(changedContexts);
                } else {
                    // These were *all* already selected, so toggle them all off instead,
                    // and send out events for all the changed contexts (which will be all of them).
                    changedContexts = this.setObjectsSelected(msg.objects, false);
                    this.fireSelectedEventForContexts(changedContexts);
                }
            }
        } else if (msg.type === 'AstroView.Initialization.Complete') {
            this.astroViewInitialized = true;
            var activeContext = this.app.getActiveContext();
            if (activeContext) {
                var position = activeContext.getPosition();
                if (position) {
                    this.moveTo(position);
                }
                this.updateAstroView(activeContext, true, true);
            }
            else {
                // move to galactic center initally, because it's nice to look at.
                this.moveTo({ "ra": 266, "dec": -29, "zoom": 4 });
            }
        }
        else if (msg.type === 'APP.AstroView.Search.Request') {
            console.log("onAstroViewEvent() : AstroView.Search.Request!!!");
            this.fireEvent(msg.type, msg);
        }
    },

    // Return an array of contexts that were changed by selecting these objects.
    setObjectsSelected: function (layers, selected) {
        var changedContextMap = {};
        for (var i = 0; i < layers.length; i++) {
            var contextId = layers[i].name.replace(/\-.*/, '');
            var context = this.app.getContext(contextId);
            var layerChanged = false;
            if (context) {
                var store = context.getStore();
                var selectedRows = layers[i].rows;
                for (var row = 0; row < selectedRows.length; row++) {
                    var id = selectedRows[row]._id_;
                    layerChanged = store.setSelected(id, selected) || layerChanged;
                }
            } else {
                Ext.log({ level: 'warn',
                    msg: 'AstroViewContainer.setObjectsSelected(): layer <' + contextId + '> not found.'
                });
            }
            if (layerChanged) {
                changedContextMap[contextId] = context;
            }
        }
        var changedContexts = [];
        for (var i in changedContextMap) {
            changedContexts.push(changedContextMap[i]);
        }
        return changedContexts;
    },

    fireSelectedEventForContexts: function (contexts) {
        for (var i = 0; i < contexts.length; i++) {
            var context = contexts[i];
            // Update our view, since our handler will ignore events from us.
            this.updateAstroView(context, false, true);

            // Fire the event
            this.fireEvent('APP.context.records.selected', {
                type: 'APP.context.records.selected',
                context: context
            });
        }
    },

    isActivated: function () {
        return (window.Astroview != undefined);
    },

    onRecordsSelected: function (event) {
        // For later..
        //var title = context.searchInput.title;
        //var description = context.searchInput.description;

        // Ignore events from ourself.
        if (event.sender !== this) {
            this.updateAstroView(event.context, false, true);
        }
    },

    onRecordsFiltered: function (event) {
        this.updateAstroView(event.context, true, true);
    },

    onContextAdded: function (event) {
        Ext.log('onContextAdded event received');
    },

    onContextRemoved: function (event) {
        Ext.log('onContextRemoved event received');
        var contextId = event.context.getUid();
        var selectedId = contextId + '-selected';
        var unselectedId = contextId + '-unselected';

        // Delete the layers.
        var selectedDeleted = AstroView.deleteLayer(selectedId);
        var unselectedDeleted = AstroView.deleteLayer(unselectedId);
    },

    onColorChanged: function (event) {
        this.updateAstroView(event.context, true, true);
    },

    onPositionChanged: function (event) {
        this.moveTo(event.position);
        this.updateAstroView(event.context, true, false);
    },

    onAvModeChanged: function (event) {
        this.updateAstroView(event.context, true, true);
    },
    
    updateAstroView: function (context, updateUnselected, updateSelected) {
        var task = this.delayedCall(function (c, updateUnselected, updateSelected) {
            // Don't bother if we don't have AstroView.
            if (!this.avReady()) return;

            var store = c.getStore();
            if (store && (store.hasPositions() || store.hasFootprints())) {
                var contextId = c.getUid().toString();
                var selectedId = contextId + '-selected';
                var unselectedId = contextId + '-unselected';
                var color = '0x' + c.getColor();
                var selectedColor = this.getSelectionColor(c.getColor());
                var avMode = c.getAvMode();  // 'NONE', 'ALL' or 'SELECTED'

				//
                // Update the Unselected Layer (if necessary)
                //
                if (updateUnselected) {
                    Ext.log('AstroViewContainer: Updating Unselected Layer:' + unselectedId);
                    var unselectedDeleted = AstroView.deleteLayer(unselectedId);
                    if (avMode == 'ALL') {
                        // For avMode of 'ALL' Draw a layer of the unselected rows.
                        var unselectedLayer = this.buildLayer(store, unselectedId, 'ALL', color, 1.0);
                        if (unselectedLayer) {
                            AstroView.createLayer(unselectedLayer);
                        }
                    }
                }

				//
                // Update the Selected Layer (if necessary)
                //
                if (updateSelected) {
                    Ext.log('AstroViewContainer: Updating Selected Layer:' + selectedId);
                    var selectedDeleted = AstroView.deleteLayer(selectedId);
                    if (avMode !== 'NONE') {
                        // For avModes of 'ALL' and 'SELECTED', draw the selected rows last (on top).
                        var selectedLayer = this.buildLayer(store, selectedId, 'SELECTED', selectedColor, 2.0);
                        if (selectedLayer) {
                            AstroView.createLayer(selectedLayer);
                        }
                    }
                }
            }
        }, this, [context, updateUnselected, updateSelected], 1);
    },

/*
    updateAstroView: function (context, keepUnselected, keepAllExisting) {
        var task = this.delayedCall(function (c, keepUnselected, keepAllExisting) {
            // Don't bother if we don't have AstroView.
            if (!this.avReady()) return;

            var store = c.getStore();
            if (store && (store.hasPositions() || store.hasFootprints())) {
                var contextId = c.getUid().toString();
                var selectedId = contextId + '-selected';
                var unselectedId = contextId + '-unselected';
                var color = '0x' + c.getColor();
                var selectedColor = this.getSelectionColor(c.getColor());
                var avMode = c.getAvMode();  // 'NONE', 'ALL' or 'SELECTED'

                // Update the unselected layer if necessary.
                var unselectedExists = AstroView.hasLayer(unselectedId);
                var keep = keepUnselected || (unselectedExists && keepAllExisting);
                if (!keep) {
                    Ext.log('Refreshing layer:' + unselectedId);
                    var unselectedDeleted = AstroView.deleteLayer(unselectedId);
                    if (avMode === 'NONE') {
                        return;
                    } else {
                        if (avMode == 'ALL') {
                            // Draw a layer of the unselected rows.
                            var unselectedLayer = this.buildLayer(store, unselectedId, 'UNSELECTED', color, 1.0);
                            if (unselectedLayer) {
                                AstroView.createLayer(unselectedLayer);
                            }
                        }
                    }
                }

                // Update the selected layer if necessary.
                var selectedExists = AstroView.hasLayer(selectedId);
                keep = selectedExists && keepAllExisting;
                if (!keep) {
                    Ext.log('Refreshing layer:' + selectedId);
                    var selectedDeleted = AstroView.deleteLayer(selectedId);
                    if (avMode === 'NONE') {
                        return;
                    } else {
                        // For avModes of 'ALL' and 'SELECTED', draw the selected rows last (on top).
                        var selectedLayer = this.buildLayer(store, selectedId, 'SELECTED', selectedColor, 2.0);
                        if (selectedLayer) {
                            AstroView.createLayer(selectedLayer);
                        }
                    }
                }
            }
        }, this, [context, keepUnselected, keepAllExisting], 1);
    },
    */

    // Color needs to be a 6 character hex string
    getSelectionColor: function (color) {
        var colorObj = Ext.draw.Color.fromString('#' + color);
        var selectedColor = '0x' + colorObj.getLighter(.3).toString().substr(1);
        return selectedColor;
    },

    buildLayer: function (store, layerId, which, color, stroke, symbol) {
        // Get an array of footprint or position objects (one for each row in the filtered store).
        var layer = null,
            rows = [],
            type;

        // Defaults:
        stroke = stroke || 1.0;
        symbol = symbol || 'square';

        if (store.hasFootprints()) {
            rows = store.getFootprints(which);
            type = 'footprint';
        } else if (store.hasPositions()) {
            rows = store.getPositions(which);
            type = 'catalog';
        }
        if (rows.length > 0) {
            var layer = {
                "name": layerId,
                "type": type,
                "canvas" : (which == "SELECTED" ? "selectCanvas" : undefined),
                "attribs": {
                    "color": color,      // Line color, an rgb string starting with '0x'
                    "stroke": stroke,    // Line width in pixels
                    "symbol": symbol  // One of 'square', 'circle', 'diamond', 'stop', 'plus'
                },
                "rows": rows
            };
        }
        return layer;
    },

    moveTo: function (position) {
        var task = this.delayedCall(function (pos) {
            if (!this.avReady()) return;
            // Set a zoom level for the first call when zoom param has not been specified
            if (!this.hasMovedTo && !pos.zoom) {
                this.hasMovedTo = true;
                pos = Ext.clone(position);
                pos.zoom = 10;  // A number from 4 to 12.
            }
            AstroView.moveTo(pos);
        }, this, [position], 1);
    },

    removeContextLayers: function (context) {
        var task = this.delayedCall(function (c) {
            if (!this.avReady()) return;
            var contextId = c.getUid();
            var selectedId = contextId + '-selected';
            var unselectedId = contextId + '-unselected';

            // Delete the layers.
            var selectedDeleted = AstroView.deleteLayer(selectedId);
            var unselectedDeleted = AstroView.deleteLayer(unselectedId);
        }, this, [context], 1);
    },

    avReady: function () {
        var avExists = (window.AstroView != undefined);
        var avInitialized = this.astroViewInitialized;
        return avExists && avInitialized;
    },

    delayedCall: function (fn, scope, args, delay) {
        var task = new Ext.util.DelayedTask(fn, scope, args);
        task.delay(delay);
        return task;
    },

    handleGraphicsChange: function (type, flag) {
        var a = 0;
    }

});