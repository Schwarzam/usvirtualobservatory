# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsamp', [dirname(__file__)])
        except ImportError:
            import _libsamp
            return _libsamp
        if fp is not None:
            try:
                _mod = imp.load_module('_libsamp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsamp = swig_import_helper()
    del swig_import_helper
else:
    import _libsamp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def sampInit(*args):
  return _libsamp.sampInit(*args)
sampInit = _libsamp.sampInit

def sampClose(*args):
  return _libsamp.sampClose(*args)
sampClose = _libsamp.sampClose

def sampStartup(*args):
  return _libsamp.sampStartup(*args)
sampStartup = _libsamp.sampStartup

def sampShutdown(*args):
  return _libsamp.sampShutdown(*args)
sampShutdown = _libsamp.sampShutdown

def Unsubscribe(*args):
  return _libsamp.Unsubscribe(*args)
Unsubscribe = _libsamp.Unsubscribe

def setCallMode(*args):
  return _libsamp.setCallMode(*args)
setCallMode = _libsamp.setCallMode

def setReplyCallback(*args):
  return _libsamp.setReplyCallback(*args)
setReplyCallback = _libsamp.setReplyCallback

def setResponseCallback(*args):
  return _libsamp.setResponseCallback(*args)
setResponseCallback = _libsamp.setResponseCallback

def defaultReplyHandler(*args):
  return _libsamp.defaultReplyHandler(*args)
defaultReplyHandler = _libsamp.defaultReplyHandler

def deaultfResponseHandler(*args):
  return _libsamp.deaultfResponseHandler(*args)
deaultfResponseHandler = _libsamp.deaultfResponseHandler

def replyStatus(*args):
  return _libsamp.replyStatus(*args)
replyStatus = _libsamp.replyStatus

def hubOpen(*args):
  return _libsamp.hubOpen(*args)
hubOpen = _libsamp.hubOpen

def hubClose(*args):
  return _libsamp.hubClose(*args)
hubClose = _libsamp.hubClose

def getAvailableHubs(*args):
  return _libsamp.getAvailableHubs(*args)
getAvailableHubs = _libsamp.getAvailableHubs

def getActiveHubName(*args):
  return _libsamp.getActiveHubName(*args)
getActiveHubName = _libsamp.getActiveHubName

def getActiveHub(*args):
  return _libsamp.getActiveHub(*args)
getActiveHub = _libsamp.getActiveHub

def hubInit(*args):
  return _libsamp.hubInit(*args)
hubInit = _libsamp.hubInit

def hubRegister(*args):
  return _libsamp.hubRegister(*args)
hubRegister = _libsamp.hubRegister

def hubUnRegister(*args):
  return _libsamp.hubUnRegister(*args)
hubUnRegister = _libsamp.hubUnRegister

def hubSetXmlrpcCallback(*args):
  return _libsamp.hubSetXmlrpcCallback(*args)
hubSetXmlrpcCallback = _libsamp.hubSetXmlrpcCallback

def hubPing(*args):
  return _libsamp.hubPing(*args)
hubPing = _libsamp.hubPing

def hubDeclareMetadata(*args):
  return _libsamp.hubDeclareMetadata(*args)
hubDeclareMetadata = _libsamp.hubDeclareMetadata

def hubDeclareSubscriptions(*args):
  return _libsamp.hubDeclareSubscriptions(*args)
hubDeclareSubscriptions = _libsamp.hubDeclareSubscriptions

def Register(*args):
  return _libsamp.Register(*args)
Register = _libsamp.Register

def UnRegister(*args):
  return _libsamp.UnRegister(*args)
UnRegister = _libsamp.UnRegister

def DeclareMetadata(*args):
  return _libsamp.DeclareMetadata(*args)
DeclareMetadata = _libsamp.DeclareMetadata

def Ping(*args):
  return _libsamp.Ping(*args)
Ping = _libsamp.Ping

def GetMetadata(*args):
  return _libsamp.GetMetadata(*args)
GetMetadata = _libsamp.GetMetadata

def DeclareSubscriptions(*args):
  return _libsamp.DeclareSubscriptions(*args)
DeclareSubscriptions = _libsamp.DeclareSubscriptions

def GetSubscriptions(*args):
  return _libsamp.GetSubscriptions(*args)
GetSubscriptions = _libsamp.GetSubscriptions

def GetRegisteredClients(*args):
  return _libsamp.GetRegisteredClients(*args)
GetRegisteredClients = _libsamp.GetRegisteredClients

def tableLoadVOTable(*args):
  return _libsamp.tableLoadVOTable(*args)
tableLoadVOTable = _libsamp.tableLoadVOTable

def tableLoadFITS(*args):
  return _libsamp.tableLoadFITS(*args)
tableLoadFITS = _libsamp.tableLoadFITS

def imageLoadFITS(*args):
  return _libsamp.imageLoadFITS(*args)
imageLoadFITS = _libsamp.imageLoadFITS

def tableHighlightRow(*args):
  return _libsamp.tableHighlightRow(*args)
tableHighlightRow = _libsamp.tableHighlightRow

def tableSelectRowList(*args):
  return _libsamp.tableSelectRowList(*args)
tableSelectRowList = _libsamp.tableSelectRowList

def coordPointAtSky(*args):
  return _libsamp.coordPointAtSky(*args)
coordPointAtSky = _libsamp.coordPointAtSky

def specLoadSSAGeneric(*args):
  return _libsamp.specLoadSSAGeneric(*args)
specLoadSSAGeneric = _libsamp.specLoadSSAGeneric

def notify(*args):
  return _libsamp.notify(*args)
notify = _libsamp.notify

def notifyAll(*args):
  return _libsamp.notifyAll(*args)
notifyAll = _libsamp.notifyAll

def call(*args):
  return _libsamp.call(*args)
call = _libsamp.call

def callAll(*args):
  return _libsamp.callAll(*args)
callAll = _libsamp.callAll

def callAndWait(*args):
  return _libsamp.callAndWait(*args)
callAndWait = _libsamp.callAndWait

def clientName(*args):
  return _libsamp.clientName(*args)
clientName = _libsamp.clientName

def setErr(*args):
  return _libsamp.setErr(*args)
setErr = _libsamp.setErr

def getErr(*args):
  return _libsamp.getErr(*args)
getErr = _libsamp.getErr

def receiveCall(*args):
  return _libsamp.receiveCall(*args)
receiveCall = _libsamp.receiveCall

def receiveNotification(*args):
  return _libsamp.receiveNotification(*args)
receiveNotification = _libsamp.receiveNotification

def receiveResponse(*args):
  return _libsamp.receiveResponse(*args)
receiveResponse = _libsamp.receiveResponse

def PingHandler(*args):
  return _libsamp.PingHandler(*args)
PingHandler = _libsamp.PingHandler

def Reply(*args):
  return _libsamp.Reply(*args)
Reply = _libsamp.Reply

def newList():
  return _libsamp.newList()
newList = _libsamp.newList

def freeList(*args):
  return _libsamp.freeList(*args)
freeList = _libsamp.freeList

def listLen(*args):
  return _libsamp.listLen(*args)
listLen = _libsamp.listLen

def setMapInList(*args):
  return _libsamp.setMapInList(*args)
setMapInList = _libsamp.setMapInList

def setListInList(*args):
  return _libsamp.setListInList(*args)
setListInList = _libsamp.setListInList

def getMapFromList(*args):
  return _libsamp.getMapFromList(*args)
getMapFromList = _libsamp.getMapFromList

def getListFromList(*args):
  return _libsamp.getListFromList(*args)
getListFromList = _libsamp.getListFromList

def newMap():
  return _libsamp.newMap()
newMap = _libsamp.newMap

def freeMap(*args):
  return _libsamp.freeMap(*args)
freeMap = _libsamp.freeMap

def setMapInMap(*args):
  return _libsamp.setMapInMap(*args)
setMapInMap = _libsamp.setMapInMap

def setListInMap(*args):
  return _libsamp.setListInMap(*args)
setListInMap = _libsamp.setListInMap

def getMapFromMap(*args):
  return _libsamp.getMapFromMap(*args)
getMapFromMap = _libsamp.getMapFromMap

def getListFromMap(*args):
  return _libsamp.getListFromMap(*args)
getListFromMap = _libsamp.getListFromMap

def newMsg():
  return _libsamp.newMsg()
newMsg = _libsamp.newMsg

def freeMsg(*args):
  return _libsamp.freeMsg(*args)
freeMsg = _libsamp.freeMsg

def msgMType(*args):
  return _libsamp.msgMType(*args)
msgMType = _libsamp.msgMType

def msgParam(*args):
  return _libsamp.msgParam(*args)
msgParam = _libsamp.msgParam

def msgTag():
  return _libsamp.msgTag()
msgTag = _libsamp.msgTag

def newParam():
  return _libsamp.newParam()
newParam = _libsamp.newParam

def freeParam(*args):
  return _libsamp.freeParam(*args)
freeParam = _libsamp.freeParam

def paramInit(*args):
  return _libsamp.paramInit(*args)
paramInit = _libsamp.paramInit

def addMapParam(*args):
  return _libsamp.addMapParam(*args)
addMapParam = _libsamp.addMapParam

def addListParam(*args):
  return _libsamp.addListParam(*args)
addListParam = _libsamp.addListParam

def paramLen(*args):
  return _libsamp.paramLen(*args)
paramLen = _libsamp.paramLen

def sampLog(*args):
  return _libsamp.sampLog(*args)
sampLog = _libsamp.sampLog

def sampTrace(*args):
  return _libsamp.sampTrace(*args)
sampTrace = _libsamp.sampTrace

def newHandle(*args):
  return _libsamp.newHandle(*args)
newHandle = _libsamp.newHandle

def freeHandle(*args):
  return _libsamp.freeHandle(*args)
freeHandle = _libsamp.freeHandle

def P2H(*args):
  return _libsamp.P2H(*args)
P2H = _libsamp.P2H

def H2P(*args):
  return _libsamp.H2P(*args)
H2P = _libsamp.H2P
# This file is compatible with both classic and new-style classes.


