# vaologin-py.cfg -- configuration file for the VAOLogin Python Portal Library
#
# This file has two sections:  the vaologin.auth section is used by the 
# vaologin.authenticate module.  The vaologin.portal is used by the 
# vaologin.portal module, but since this latter module in turn uses 
# vaologin.authenticate, vaologin.portal depends on both sections.  

#########################################################################
#
# vaologin.authenticate module configuration.  When you use this module
# directly, your script chooses when you require authentication and what
# user attributes you would like to get.
#
# (leave the label below intact.)
[vaologin.auth]

# The directory where vaologin-py is installed
#
homedir: /usr/local/vaologin

# The directory where user state is cached.  No default.
#
statedir:  %(homedir)/var

# The directory where user session data is cached.  
# 
# The default is:
# sessionsdir: %(statedir)s/VAOsessions

# The directory where user certificates are stored.  This directory not 
# be world readable, but readable by web server.  
# 
# The default is:
# certdir: %(statedir)s/certificates

# The OpenID Provider ID.  Change this when using a provider other than 
# the VAO Login Service.
#
# The default is:
# providerOpenID: https://sso.usvao.org/openid/provider_id/

# The portion of web server URL space that should be consider part of the 
# portal that requires authentication.  The default will be just the URL
# that triggers authentication.
#
# It is recommended that you set this.  
# 
# portalURLRealm: http://myserver.org/cgi-bin/restricted

# a comma-separated list of files, each containing one or more Certificate
# Authority certificates.  This allows the python code to access the 
# HTTPS URLs of the VAO Login server.  The official CA cert for the VAO 
# web site is included in the vaologin package (see etc/cacerts) and is
# installed into %(homedir)/cacerts/usvao-ca.crt.  You can add others as
# well, such as those that may already be installed on your system (e.g.
# $JAVA_HOME/lib/security/cacerts) which include major commercial CAs.
# 
caCertBundles: %(homedir)/cacerts/usvao-ca.crt

# A comma-separated list of attributes will always be requested from the 
# server as part of user authentication.  These will be marked in the 
# request as required; any additional attributes that are added when 
# requesting authentication will be marked as optional (i.e. the 
# server/user need not share this information for authentication to be
# successful).  
# 
# Allowed values include username, name, firstname, lastname, email, 
# institution, phone, and country.
#
# We recommend that you at least include username.  If you use the portal
# module, username will be included as a required attribute automatically.
#
# requiredAttributes: username, name, email
requiredAttributes: username

#########################################################################
#
# vaologin.portal module configuration.  When you use this module, you 
# specify directories where you will keep static documents and CGI scripts
# that need protection--that is, require authentication in order to access 
# them.  You also specify "aliases"--URL paths that indicate calls to CGI 
# scripts, static documents, and requests to login or logout.  These are 
# the part of the path that appear just after the portal CGI script.  For 
# example, if you have installed the portal script so that it is accessed
# via 
# 
#     http://myportal.net/cgi-bin/portal
# 
# then in the following URL,
# 
#     http://myportal.net/cgi-bin/portal/cgi-bin/protectedScript
#
# the part "/portal/cgi-bin/protectedScript" will be matched against the 
# various aliases to determine what it refers to.  
# 
# (leave the label below intact.)
[vaologin.portal]

# The directory where protected documents can be found.  Set this to a 
# blank value to disable sending static documents.  (If not set--i.e. 
# commented out--an error message will appear in the web server error 
# log on each invocation.)  See also docalias below
# 
# documentRoot: %(homedir)/web/html
documentRoot: /var/www/html-authenticated

# sub-path that indicates a URL refering to a static document in the 
# documentRoot.  When not set (which is typical), then all paths that do 
# not match the other aliases below are assumed to be static documents; 
# the path below the portal CGI URL corresponds to the path to the document 
# under the documentRoot directory.  If this alias is set, then URLs to 
# static documents must start with this sub-path; the remaining (right-hand 
# side) path is the path under the documentRoot where the document can be 
# found.
# 
# docalias: 

# The directory where protected CGI scripts can be found.  Set this to a 
# blank value to disable running CGI scripts.  (If not set--i.e. 
# commented out--an error message will appear in the web server error 
# log on each invocation.)  See also scriptAlias below.
#
# scriptRoot:  %(homedir)/web/cgi-bin-authenticated
scriptRoot:  /var/www/cgi-bin-authenticated

# sub-path that indicates a URL refering to a static document in the 
# documentRoot.  If this alias is set, then URLs to CGI scripts must 
# start with this sub-path; the remaining (right-hand side) path is 
# the path under the scriptRoot where the script can be found.  If scriptAlias
# is not set and docAlias is, then any URL not matchin the other aliases
# default to refering to a CGI script, the path below the portal CGI URL 
# corresponds to the path to the script under the scriptRoot directory.  
# 
scriptAlias: /cgi-bin/

# the URL path that specifically refers to a request to simply log in to the 
# portal.  To match, this sub-path must appear just after the portal CGI 
# URL.  Anything may appear in the URL after the loginAlias sub-path.  
# 
loginAlias: /login

# The URL to forward to when after success login.  Normally this is a 
# relative URL (relative to the server root, not the portal root); however,
# it can be an absolute path.  If not set, it will default to the server's
# home page.  
# 
# loginForwardUrl: /welcome.html

# the URL path that specifically refers to a request to log out of the 
# portal.  To match, this sub-path must appear just after the portal CGI 
# URL.  Anything may appear in the URL after the logoutAlias sub-path.  
#
logoutAlias: /logout

# The URL to forward to when after success login.  Normally this is a 
# relative URL (relative to the server root, not the portal root); however,
# it can be an absolute path.  If not set, it will default to the server's
# home page.  
# 
# logoutForwardUrl: 

# The resource to access when no document is specified in the URL--i.e. 
# the URL is simply the URL to the portal CGI script.  This path is relative
# to the documentRoot directory.
# 
defaultDocument: /index.html

# Uncomment this if your portal uses HTTPS.
# 
# protocolScheme: https

# Upon a successful login, a session cookie is set with a limited lifetime.
# This sets the duration of the session in hours.  If not set, no session 
# cookie will be set and session will expire just after the access completes.
# 
sessionLifehours: 8

# The path to a MIME-type file mapping document extensions to MIME types.  
# 
# mimeTypeMapFile: /etc/mime.types

# MIME-type mappings that override those found in the above file.  
# This is a comma-delimited list where each element gives a mapping.  The 
# first field in the mapping is a MIME type and the remaining fields are 
# document extensions that should be mapped to that MIME type.  
# 
mimeTypeMap: text/plain txt asc, application/fits fits fits.gz

# The realm to set into user cookies.  The realm is a base URL that gets 
# set into session cookies to indicate what part of the URL space the cookie 
# corresponds to.  This should be set at least the portal URL, but a safe 
# bet is to set it to the root URL for the server.  If not specified, it 
# defaults to vaologin.auth.portalurlrealm.  Specify this if you want to 
# deploy the loginstatus service; it must include the cgi-bin area where 
# the portal CGI script runs.  
# 
cookieRealm: http://myportal.net/

# The list of attributes you would like to receive from the VAO Login 
# Service.  This will be in addition to the attributes listed above as 
# part of the requiredAttributes property; the difference will be that 
# these will be marked as optional (i.e. the server/user need not share 
# these attributes for authentication to be successful).  See 
# pathsNeedingAttributes below if you only need them when users request 
# certain URLs.  
# 
# requestAttributes: name, institution, phone, email, country

# URL paths (relative to the portal CGI URL) that require the attributes
# listed in requestAttributes.  (Note that paths listed there imply 
# forceAuthentication; see below.)  If not set, the optional attributes 
# will always be requested whenever authentication is needed (and only then). 
# 
# pathsNeedingAttributes: /register

# URL paths (relative to the portal CGI URL) that require a certificate for 
# the user to be retrieved from the VAO Login service.  These URLs would 
# normally be CGI services that need to access other services on the users 
# behalf.  (Note that paths listed there imply forceAuthentication.)
#
# pathsNeedingCert: /shareData

# URL paths (relative to the portal CGI URL) that should force a 
# (re-)authentication check at the VAO Login service.  This does not 
# necessarily mean that the user will have to enter a username and 
# password (unless VAO their session has expired); it just means there 
# will be a round trip with the VAO login server where user information 
# (particularly attributes) are updated. 
# 
# forceAuthentication: 

