VOClient Tasking - Python Task-Function Bindings (V4)

Changes for V4
--------------------------------
    Remove inconsistencies between dalquery V2 and tasking V4
    Apply Python style, esp. for function names (lower case)
    Use properties instead of attributes in classes
    Task and Pset evolved considerably.


Functionality
--------------------------------

    Standard Task-Function Signature
    --------------------------------

      result = taskfcn (<posargs>, <kwargs>, <taskctl>)

        posargs - positional arguments if any, from task params (list)
        kwargs  - keyword=value args if any, from task params (dict)
	taskctl - task control args, e.g. async=True (dict)

      Here, "result" is an output parameter set (opset).
      OPset extends Pset
        adds task execution methods, wait, status, etc.
      param-set callback moved to Pset
      taskctl
        async=False	# execute synchronous by default
	execute=True	# execute immediately by default

      The python function binding for a task processes the above
      arguments, using the lower level tasking layer API, to produce an
      input pset for the task and then exec the task either sync or
      async.  An opset is returned immediately even for an async
      execution.  The autogenerated function binding for a task is
      completely generic and data-driven (input pset, function args
      etc).

      For a task we need to consider both the static definition of a
      task, and a running instance of the same task, of which there may
      be any number.  This is no problem for task functions as we can
      submit multiple instances of <taskfunc> running asynchronously,
      however it needs to be represented in the lower level Task class.

      Example Function Wrapper for Task

	def mytask(*posargs, async=False, **kwargs):
	    # Get the package Task descriptor.
	    task = gettask('mytask', 'mypkg')

	    # Get a runnable Task descriptor for the task.
	    t = task.newtask()

	    # Process any function arguments into the ipset.
	    t.setparams(posargs, kwargs)

	    # Execute the task.
	    if async:
		return t.execute_async()
	    else:
		return t.execute_sync()

      In practice most of this can be moved into a task runner function, passing
      in only the task and package names and the function arguments.

      Following task completion the client then typically does something like

	if result.exitstatus == ERROR:
	    print 'error: ', result.exitmsg
	else
	    print result['ra'], result['dec']
	result.close()

      The OPset class has a Dict interface hence the output pset can be accessed
      directly as a dictionary, as well as via the OPset class methods.



    Package Management Semantics
    --------------------------------

      Packages
        - Packages can come from anywhere; general interface
	- Initially we supply only the VAO package (when called from a
	  Unix shell these are the "CLI" tasks).
	- There is also a lower level interface between the VOClient
	  tasking layer (C code) and a package, which we do not get into here
	  as it is not visible from Python or other language bindings.

      Installing a package
        - Package file is placed into a directory in pkgpath
	- Tasking layer "rescans", finds new package and installs it
	    extract metadata, unzip into directory if necessary
	      (should every package install into a subdirectory?
	      would provide a standard place to put metadata and other runtime)
	- Python module for package is installed into Python
	    includes task-function bindings, autodoc

      Loading a package
        - Package is added to package list
	    package metadata, tasklist etc. is cached and queryable
	- Tasks are runnable via low level tasking API once pkg is loaded

	Issue: package list only lists loaded packages.  We may also want
	a way to list installed packages (option to pkgList?)

      Python module version of a package
        - Higher level, fully python interface to tasks in a package
        - Autogenerated, once, when a package is installed
        - Standard python IMPORT and FROM XX IMPORT YY AS ZZ etc. work here
	- Importing the package into python also "loads" the package (__init__.py)
	- Python module is not used if tasks are run via lower level tasking API


    Parameter Set Semantics
    -----------------------------

	Pset metadata
	  - pset definition (class) is maintained in C tasking code
	  - probably represented as XML included with the package metadata
	Pset instance
	  - Most usage (eg task execution) involves a runtime copy of the pset.
	  - C tasking code manages the actual pset instance
	  - Hence any binary data is managed by the C code
	     large files/arrays can be handled efficiently
	     can interface to NumPy arrays at C level if needed
	  - Async i/o to parameters can be handled in C, beneath python
	  - Param-changed callback is via python thread
	      C code just sets a flag to be seen by python API code when it runs
	      Python pset handler executes the callback


Tasking - Python API V4
--------------------------

    Module Globals and Functions
    ------------------------------------

		     setpkgdirs (dirs)
		      addpkgdir (dir)
		     getpkgdirs ()
			pkglist (pattern=None, all_installed=False)	# list packages
	   Package = getpackage (name)					# get Package descriptor
	         Task = gettask (name, pkg)				# get Task descriptor
		    loadpackage (name)					# load a package
			 rescan ()					# scan for new pkgs

	    -- Notes --
		pkglist
		   "pattern" is in terms of package names, e.g., "vao.*".
		     These do not necessarily correspond to the filenames of package
		     files.  A package file could define multiple packages / modules.
		   By default only loaded packages are listed.  allInstalled=True will
		     cause all installed packages matching the pattern to be listed,
		     whether or not they are loaded and runnable (if a package is not
		     loaded only the root package will appear).
		getpackage
		    Return the Package descriptor for the named package.
		gettask
		    Convenience function to get the Task descriptor for a task without
		    having to first access the package.
		loadpackage
		    Loads a package, making all package metadata available and rendering
		    the tasks runnable.  Like Python import there is no unload; unload
		    occurs when the session ends.
		rescan
		   Rescans the pkgDirs looking for new packages.  Any new packages
		   found are installed.  Tasking code may rescan automatically, or
		   a rescan may be requested.


    Package Class
    ------------------------------------

		class Package ()
		    # Package contains a set of executable Tasks.

		    __init__ (name)
		    __iter__ () 	# get next Task instance in the package

		    # Properties
		    name	= None	# package name
		    descr	= None	# description string
		    author	= None	# package author
		    contact	= None	# contact email address
		    iconurl	= None	# URL to package icon
		    version	= None	# package version string

		       getattrs ()					# get task attributes
		       tasklist (pattern=None)				# list tasks
		 Task = gettask (name)					# get Task descriptor

	    -- Notes --
		Package
		    The Package constructor is not normally called directly by client code.
		    A construct such as "for task in <package>" will iterate through
		    the Task (object) instances.
		tasklist
		    Returns a dictionary of task name and description summarizing
		    the available tasks in the package.  The pattern may be used to
		    find only specific tasks.
		gettask
		    Return a Task descriptor for the named task.
		getattrs
		    Returns the package attributes as a dict.


    Task Class
    ------------------------------------

		class Task ()
		    # The Task class is used both to describe an available task (a task
		    # as described in the list of tasks for a package) as well as a runable
		    # or running instance of the task.  Multiple instances of a task may
		    # execute simultaneously, possibly with different parameters.

		    __init__ (name, pkg)

		    # Properties
		    name	= None	# task name
		    pkg		= None	# parent package name
		    descr	= None	# task description string

		    # These are specific to the runtime instance if any.
		    id		= None  # Unique task ID if runnable
		    rank	= None  # task rank if part of parallel set
		    defpset	= None	# default input parameter set
		    ipset	= None	# task input parameter set
		    opset	= None	# task output parameter set
		    exitstatus	= None	# task execution exit status (OK or ERROR)
		    exitmsg	= None	# task execution return error or warning message
	
		       getattrs ()					# get task attrs as dict
		      setparams (posargs, kwargs)			# set input params
	       dict = getparams ()					# get input params as dict
		       setparam (name, val)				# set indiv param
		     unsetparam (name)					# unset indiv param
		 val = getparam (name)					# get indiv param

		 Task = newtask (ipset=None, rank=None)			# get a runnable instance
	   opset = execute_sync ()					# execute synchronously
	  opset = execute_async ()					# execute asynchronously
		    stat = wait ()					# wait for completion
		  stat = status ()					# current status
			  close ()					# free all resources

	    -- Notes --
		Task
		    The Task constructor is not normally called directly by client code.
		    Clients should use the newtask() method to create runnable task instances.
		newtask
		    Create a new, runnable instance of the current task from the package
		    task descriptor.  ID will be assigned a unique integer value and an empty
		    output pset (opset) will be created and initialized.  A new input parameter
		    set will be created from the task default pset, or by copying values from
		    the given input ipset if specified.
		id
		    The task ID.  All runnable or running tasks have a unique positive integer
		    task ID assigned by the tasking layer (not the client) when a new runnable
		    task descriptor is created.  If the task ID is None the task is not
		    runnable from the current descriptor, i.e., the Task instance merely
		    describes an available task.
		rank
		    A task can be assigned a rank by the client when a new task instance is
		    created to differentiate multiple instances of a task in the case of a
		    parallel task set (rank=0 is the master, rank=N is a worker instance).
		set/get params
		    Convenience methods from Pset to set/get task input parameters.
		defpset
		    The package defined default parameters for the task.  These should
		    not normally be modified by a client; if anything is modified it
		    will affect all further use of the task in the current session.
		ipset
		    The input Pset for the task instance.
		opset
		    The output Pset for the task instance.
		close
		    Should be called by the client to ensure that all resources are
		    freed.  In particular the input and output psets which may contain
		    large data items, and resources will need to be freed in the C tasking
		    layer as well as in Python.

		Implementing Task Functions
		    A Python task function binding when called would invoke newtask()
		    to create a new task instance, process any function arguments into the
		    task input parameter set, then return opset as the function value.
		    The opset is returned immediately for an async task, or following
		    successful or unsuccessful task completion for a sync task.  Opset
		    will accumulate output during exection and will have a fully completed
		    output set of parameters at task completion.


    Pset Class
    ------------------------------------

		class Pset (dict)
		    __init__ (name=None, pkg=None, task=None, mode='r')

		    # Properties
		    name	= None	# pset name
		    pkg		= None	# package to which pset belongs
		    task	= None	# task name if task pset
		    descr	= None	# pset description

			   load (str)					# load saved pset
		     str = save ()					# save pset to blob str

		       getattrs ()					# get pset attrs as dict
		       setparam (name, value)				# set/add indiv param
		     unsetparam (name)					# unset indiv param
	         val = getparam (name)					# get param value
		      setparams (posargs, kwargs)			# set indicated params
	       dict = getparams ()					# get set params as dict
	      list = paramnames ()					# get list of set params
		    setcallback (params, <func>)			# set a callback
		newval = <func> (param, pset, oldval, newval)		# callback to <func>

        Param, value = refparam (name)					# get ref to Param obj
		       addparam (Param, value)				# add param as Param obj
		       delparam (name)					# del param by name

		          close ()					# close and free resources
		         delete ()					# close and delete

	    -- Notes --
		Pset
		    Is a dictionary: supports usage such as "x = pset['param']".
		    Iterable; supports usage such as "for param in <pset>".
		    As a constructor may either open an existing pset, or create a new
		    empty pset with the given attributes.  Clients rarely create
		    psets; they mostly reference existing psets, typically task psets.
		name, pkg, task
		    Psets which have a name are persistent; a pset without a name
		    is "deleted" when it is closed (e.g. a task runtime ipset or opset).
		    All psets belong to some package, the default being a global pset.
		    The pset name must be unique within a package.  A pset may or may not
		    have an associated task, defined within the same package as the pset.
		    The pset name and task name should normally be the same, although this
		    is not required.  For task defined psets the pset name and task name
		    are always the same.
		mode
		    Mode is the same as for file access in Python.  'r' opens an
		    existing pset read only; 'w' will create a new pset, overwriting
		    an existing one if permissible and if it is a named pset.
		    'r+' opens an existing pset for both reading and writing.
		    For nonpersistent psets (name=None), mode is implicitly 'w'.
		save, load
		    Save the pset instance contents to a blob string, or restore from
		    same.  The encoding used is internal to the interface.

		setparam, unsetparam, getparam
		    Get/set/unset the value of an individual parameter.  Setparam
		    can be used to add parameters to a pset; otherwise referencing
		    a parameter that does not exist is an error.
		refparam
		    Get the Param object and param value for the named parameter.  This
		    allows access to the full metadata for the parameter.
		addparam
		    Add a parameter as a Param object.  This allows full metadata
		    to be specified for the new parameter.
		setparams
		    Set the values of the given params specified as a tuple of positional
		    arguments followed by a dict of keyword arguments.
		getparams
		    Returns the currently set params as a dict; positional params are
		    returned in keyword: value form.
		paramnames
		    Returns the names of the currently set params as a list.  This differs
		    from iterating the pset, which will traverse the entire pset including
		    params which are defined but not set.

		setcallback
		    The specified function will be called whenever a new value is assigned
		    to the listed parameter or parameters.  This is typically used with an
		    output parameter to deliver messages back to the client from a running
		    task, but may be used for any other purpose as well.  Setting a callback
		    on a "status" output parameter would allow the runtime status of the
		    task to be monitored, likewise output to "stdout" or "stderr" can be
		    delivered during task execution.  Other custom output parameters can be
		    used to monitor the internal state of a task during execution.
		    (See notes on parameter set semantics and python threads above).
		close
		    Close the pset and free any associated resources.  If the pset
		    has no name it is deleted.
		delete
		    Close and delete the pset.  Psets not created by the client (task
		    default psets) cannot be deleted.

		Parameter Semantics
		    Much runtime parameter usage for pset instances is simple, involving
		    only the name and value, e.g.  set/get or a dict.  If more information
		    about a parameter is required, e.g., the type or encoding of a complex
		    object or the parameter description, then the Param descriptor for the
		    parameter may be accessed.


    OutputPset Class
    ------------------------------------

		class OutputPset (Pset)
		    # Output pset extends Pset and adds some tasking capabilities.

		    __init (pkg, task)
		    __iter__ ()		# iterate over param instances in pset

		    # Added properties
		    taskdesc	= None	# Task descriptor for runtime task
		    exitstatus	= None	# task execution exit status (OK or ERROR)
		    exitmsg	= None	# task execution return error or warning message

	   opset = execute_sync ()					# execute synchronously
	  opset = execute_async ()					# execute asynchronously
		    stat = wait ()					# wait for completion
		    setcallback (params, <func>)			# set a callback
		  stat = status ()					# current status
			  close ()					# free all resources

	    -- Notes --
		OutputPset
		    An OutputPset instance is returned when the python function binding
		    for a task is used to run the task.  It provides a pset container
		    for all output params as well as access to the runtime task
		    descriptor and task control methods.
		Task Execution
		    - If the function is called with execute=False then the task does not
		    execute until directed by the client, allowing other options to be
		    set before execution (e.g., setcallback).
		    - If the function is called with async=True then the function returns
		    immediately after the task is executed, while it is still running.



    Param Class
    ------------------------------------

		class Param ()
		    # The Param class fully defines a parameter.

		    __init__ (name, type, descr)

		    # Properties
		    name	= None	# parameter name
		    type	= None	# parameter type (int,real,image,table, etc.)
		    descr	= None	# parameter description string
		    encoding	= None	# encoding of param (e.g., fits, votable)
		    ucd		= None  # UCD (optional)
		    utype	= None	# Utype (optional)
		    default	= None	# default value

	    -- Notes --
		    Parameter values are specific to the pset instance, not to the
		    parameter definition.

