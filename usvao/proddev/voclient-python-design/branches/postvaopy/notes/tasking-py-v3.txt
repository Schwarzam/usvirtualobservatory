VOClient Tasking - Python Task-Function Bindings (V3)

    Standard Task-Function Signature
    --------------------------------

      opset = taskfcn (<posargs>, <kwargs>, <taskctl>)

        posargs - positional arguments if any, from task params (list)
        kwargs  - keyword=value args if any, from task params (dict)
	taskctl - task control args, e.g. async=True (dict)

      Opset extends Pset
        adds task execution methods (wait, status)
      param-set callback moved to Param

      The python function binding for a task processes the above
      arguments, using the lower level tasking layer API, to produce an
      input pset for the task and then exec the task either sync or
      async.  An opset is returned immediately even for an async
      execution.  The autogenerated function binding for a task is
      completely generic and data-driven (input pset, function args
      etc).

      For a task we need to consider both the static definition of a
      task, and a running instance of the same task, of which there may
      be any number.  This is no problem for task functions as we can
      submit multiple instances of <taskfunc> running asynchronously,
      however it needs to be represented in the lower level Task class.


    Package Management Semantics
    --------------------------------

      Packages
        - Packages can come from anywhere; general interface
	- Initially we supply only the VAO package (when called from a
	  Unix shell these are the "CLI" tasks).
	- There is also a lower level interface between the VOClient
	  tasking layer (C code) and a package, which we do not get into here
	  as it is not visible from Python or other language bindings.

      Installing a package
        - Package file is placed into a directory in pkgpath
	- Tasking layer "rescans", finds new package and installs it
	    extract metadata, unzip into directory if necessary
	      (should every package install into a subdirectory?
	      would provide a standard place to put metadata and other runtime)
	- Python module for package is installed into Python
	    includes task-function bindings, autodoc

      Loading a package
        - Package is added to package list
	    package metadata, tasklist etc. is cached and queryable
	- Tasks are runnable via low level tasking API once pkg is loaded

	Issue: package list only lists loaded packages.  We may also want
	a way to list installed packages (option to pkgList?)

      Python module version of a package
        - Higher level, fully python interface to tasks in a package
        - Autogenerated, once, when a package is installed
        - Standard python IMPORT and FROM XX IMPORT YY AS ZZ etc. work here
	- Importing the package into python also "loads" the package (__init__.py)
	- Python module is not used if tasks are run via lower level tasking API


    Parameter Set Semantics
    -----------------------------

	Pset metadata
	  - pset definition (class) is maintained in C tasking code
	Pset instance
	  - C tasking code manages the actual pset instance
	  - Hence any binary data is managed by the C code
	     large files/arrays can be handled efficiently
	     can interface to NumPy arrays at C level if needed
	  - Async i/o to parameters can be handled in C, beneath python
	  - Param-changed callback is via python thread
	      C code just sets a flag to be seen by python API code when it runs
	      Python parameter handler executes the callback


Tasking - Python API V3
--------------------------

    Module Globals and Functions
    ------------------------------------

		     setPkgDirs (dirs)
		      addPkgDir (dir)
		     getPkgDirs ()
			pkgList (pattern=None, allInstalled=False)
		    loadPackage (name)
			 rescan ()					# scan for new pkgs

		pkgList
		   "pattern" is in terms of package names, e.g., "vao.*".
		     These do not necessarily correspond to the filenames of package
		     files.  A package file could define multiple packages / modules.
		   By default only loaded packages are listed.  allInstalled=True will
		     cause all installed packages matching the pattern to be listed,
		     whether or not they are loaded and runnable (if a package is not
		     loaded only the root package will appear).

		rescan
		   Rescans the pkgDirs looking for new packages.  Any new packages
		   found are installed.  Tasking code may rescan automatically, or
		   a rescan may be requested.

    Package Class
    ------------------------------------

		class Package ()
		       __iter__ () 	# get next Task instance in the package

		    # Class attributes
		    name	= None	# package name
		    descr	= None	# description string
		    author	= None	# package author
		    contact	= None	# contact email address
		    iconUrl	= None	# URL to package icon
		    version	= None	# package version string

		       taskList (pattern=None)
		       pkgAttrs ()

		Package
		    A construct such as "for task in <package>" will iterate through
		    the Task (object) instances.
		taskList
		    Returns a dictionary of task name and description summarizing
		    the available tasks in the package.
		pkgList
		    Returns the package attributes as a dict.

    Task Class
    ------------------------------------

		class Task ()
		    # The Task class is used both to describe a runnable task as
		    # well as a running instance of the task.  Multiple instances of
		    # a task may be execute simultaneously.

		    # Class attributes
		    name	= None	# task name
		    pkg		= None	# parent package name
		    descr	= None	# task description string

		    # These are specific to the runtime instance if any.
		    id		= None  # ID of executing task instance
		    rank	= None  # task rank if part of parallel set
		    ipset	= None	# task input parameter set
		    opset	= None	# task output parameter set
		    exitstatus	= None	# task execution exit status (OK or ERROR)
		    exitmsg	= None	# task execution return error or warning message
	
		      taskAttrs ()					# get task attrs as dict
		      setParams (dict|pset)				# set input params
	       dict = getParams ()					# get input params as dict
		    executeSync ()
		   executeAsync (rank=None)
		   opset = wait ()					# wait for completion
			 status ()					# current status
			  close ()					# free all resources

		Task
		    Tasks are normally defined by the C tasking layer when a package is
		    defined, and are not creatable by the client except by executing an
		    existing task.
		Task
		    An iterator over Task is possible for the input params of the
		    task, however a task can have both an input and output pset.  So it
		    is better to leave any Param iterators to the Pset class.
		id, rank
		    Useful information about the executing task instance.  Rank can be
		    specified by the client in the case of a parallel task set.
		setParams, getParams
		    The input params may be a dict of param=value, or a Pset instance.
		    getParams returns the input params as a dict.
		ipset Attribute
		    Returns the input pset as a Pset object.
		opset
		    Can be obtained either as an attribute, or with wait().
		close
		    Should be called by the client to ensure that all resources are
		    freed, in particular the input and output psets which may contain
		    large data items.


    Pset Class
    ------------------------------------

		class Pset (name, pkg=None, task=None, descr=None)
		    __iter__ ()		# iterate over Param instances in pset

		    # Class attributes
		    name	= None	# pset name
		    pkg		= None	# package name; may be None
		    task	= None	# task name associated with pset; may be None
		    descr	= None	# pset description

		       loadPset (pkg=None, task=None, descr=None, saveFile=None)
		       savePset (saveFile)
		      getParams ()					# get params as dict
		       getParam (name)					# get Param object
		       addParam (name, type, descr, encoding=None)
		       delParam (name)
		  getParamValue (name)					# get value of a param
		  setParamValue (name, value)				# set value of a param

		Pset
		    Iterable; supports usage such as "for param in <pset>".
		    As a constructor creates a new empty pset with the given attributes.
		loadPset
		    Either load a saved pset from the given saveFile, or set the
		    specified attributes of the pset.  If loading a saved pset any
		    attributes specified must agree.
		savePset
		    Save the pset to a file.  The format used is internal to the interface.
		getParams
		    Get the contents of the pset as a dict of param=value.



    Param Class
    ------------------------------------

		class Param (name, type, descr, encoding)

		    # Class attributes
		    name	= None	# parameter name
		    type	= None	# parameter type (string/int/real/bool/blob)
		    desc	= None	# parameter description string
		    encoding	= None	# encoding of param (i.e.  mime type)
				
			getValue ()					# get param value
			setValue (val)					# set param value
		      paramAttrs ()					# param attrs as dict
		     setCallback (<func>)				# set a callback
			  <func> (paramName, value)			# callback to <func>

		setCallback
		    The given function will be called whenever a new value is assigned
		    to the parameter.  Used for an output parameter to deliver messages
		    from a running task, but may be used for any other purpose as well.
		    (See notes on parameter set semantics and python threads above).

