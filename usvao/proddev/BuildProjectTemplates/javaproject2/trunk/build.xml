<project xmlns:ivy="antlib:org.apache.ivy.ant" name="javaproject2" default="jar" basedir=".">

  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

  <path id="ivy.lib.path">
    <fileset dir="/usr/src/apache-ivy-2.2.0" includes="*.jar"/>
  </path>
  <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

  <property file="${user.home}/.m2/maven.properties"/>
  <property name="findbugs.home" value="/usr/share/java" />

  <property name="maven.src.dir" value="src/main/java"/>
  <property name="maven.build.output" value="target/classes"/>
  <property name="maven.build.directory" value="target"/>
  <property name="maven.build.final.name" value="javaproject2-1.0"/>
  <property name="maven.test.reports" value="${maven.build.directory}/test-reports"/>
  <property name="maven.test.output" value="target/test-classes"/>
  <property name="maven.repo.local" value="${basedir}/lib"/>
  <property name="maven.coverage.output" value="${basedir}/target/cobertura"/>

  <path id="build.classpath">
    <fileset dir="${maven.repo.local}">
      <include name="log4j-1.2.16.jar"/>
      <include name="junit-4.0.jar"/>
      <include name="cobertura-1.8.jar"/>
    </fileset>
  </path>
  <path id="cobertura.classpath">
    <fileset dir="${maven.repo.local}">
      <include name="log4j-1.2.16.jar"/>
    </fileset>
  </path>
  <path id="pmd.classpath">
    <fileset dir="/usr/share/java">
      <include name="pmd.jar"/>
    </fileset>
  </path>
<!--
  <path id="pmd.classpath">
    <pathelement location="${build}"/>
    <fileset dir="/usr/share/java/">
       <include name="pmd.jar"/>
    </fileset>
  </path>
-->

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
  <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath"/>

  <target name="clean" description="Clean the output directory">
    <delete file="cobertura.ser" />
    <delete dir="${maven.build.directory}"/>
  </target>

  <target name="compile" depends="get-deps" description="Compile the code">
    <mkdir dir="${maven.build.output}"/>
    <javac destdir="${maven.build.output}" excludes="**/package.html" debug="true" deprecation="true" optimize="false">
      <src>
        <pathelement location="${maven.src.dir}"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>
  </target>

  <target name="jar" depends="compile,test" description="Clean the JAR">
    <jar jarfile="${maven.build.directory}/${maven.build.final.name}.jar" basedir="${maven.build.output}" excludes="**/package.html"/>
  </target>

  <target name="compile-tests" depends="junit-present, compile" description="Compile the test code" if="junit.present">
    <mkdir dir="${maven.test.output}"/>
    <javac destdir="${maven.test.output}" excludes="**/package.html" debug="true" deprecation="true" optimize="false">
      <src>
        <pathelement location="src/test/java"/>
      </src>
      <classpath>
        <path refid="build.classpath"/>
        <pathelement location="${maven.build.output}"/>
      </classpath>
    </javac>
  </target>

  <target name="test" depends="compile, junit-present, compile-tests" if="junit.present" description="Run the test cases">
    <mkdir dir="${maven.test.reports}"/>
    <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <sysproperty key="net.sourceforge.cobertura.datafile"
      		  file="${maven.coverage.output}/cobertura.ser" />
      <classpath refid="cobertura.classpath"/>
      <classpath location="${maven.coverage.output}" />
      <classpath>
        <path refid="build.classpath"/>
        <pathelement location="${maven.build.output}"/>
        <pathelement location="${maven.test.output}"/>
      </classpath>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <batchtest todir="${maven.test.reports}">
        <fileset dir="src/test/java">
          <include name="**/Test*.java"/>
          <exclude name="**/*Abstract*Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="cobertura" depends="clean,test,jar">
    <cobertura-instrument todir="${maven.coverage.output}">
        <ignore regex="org.apache.log4j.*" />
        <fileset dir="${maven.build.output}">
           <include name="**/*.class" />
           <!--exclude name="**/*Test.class" /-->
        </fileset>
        <fileset dir="${maven.build.output}">
          <include name="*.jar" />
        </fileset>
    </cobertura-instrument>
    <cobertura-report format="xml" destdir="${maven.coverage.output}" srcdir="${maven.src.dir}" />
    <cobertura-check branchrate="0" totalbranchrate="0" totallinerate="0">
        <regex pattern="net.vao.*" branchrate="0" linerate="0"/>
    </cobertura-check>
  </target>

  <target name="findbugs" depends="jar">
     <findbugs home="${findbugs.home}"
               output="xml"
               outputFile="target/findbugs.xml" 
               >
                  <sourcePath path="${basedir}/${maven.src.dir}" />
                  <class location="${basedir}/target/${maven.build.final.name}.jar" />
               <!--
                  <auxClasspath path="${basedir}/lib/Regex.jar" />
                -->
     </findbugs>
  </target>

  <target name="pmd" depends="">
     <pmd shortFilenames="true">
        <ruleset>rulesets/design.xml</ruleset>
        <ruleset>basic</ruleset>
        <formatter type="xml" toFile="target/pmd.xml" linkPrefix="http://pmd.sourceforge.net/xref/"/>
        <fileset dir="${basedir}/${maven.src.dir}">
          <include name="net/vao/*.java"/>
        </fileset>
     </pmd>
  </target>

  <target name="test-junit-present">
    <available classname="junit.framework.Test" property="junit.present"/>
  </target>

  <target name="junit-present" depends="test-junit-present" unless="junit.present">
    <echo>================================= WARNING ================================</echo>
    <echo> Junit isn&apos;t present in your $ANT_HOME/lib directory. Tests not executed. </echo>
    <echo>==========================================================================</echo>
  </target>

  <target name="test-offline">
    <condition property="maven.mode.offline">
      <equals arg1="${build.sysclasspath}" arg2="only"/>
    </condition>
  </target>

  <target name="get-deps" depends="test-offline" description="Download all dependencies" unless="maven.mode.offline">
     <ivy:retrieve />
  </target>

  <target name="vaopublish">
    <ivy:retrieve/>
    <ivy:publish resolver="vaoresolver" overwrite="true" update="true"> <!-- settingsRef="ivy.pub.settings"-->
      <artifacts pattern="${basedir}/target/[module]-[revision].[ext]" />
    </ivy:publish>
  </target>

  <ivy:publish 
               resolver="vaoresolver"
               pubrevision="1.0" 
               update="true" 
               overwrite="true" 
               organisation="vao" 
               module="javaproject2" 
               revision="1.0"
               >
      <artifacts pattern="${basedir}/target/[module]-[revision].[ext]" />
  </ivy:publish>

</project>
